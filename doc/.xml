<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TimeTableManager</name>
    </assembly>
    <members>
        <member name="F:TimeTableManager.UI.FAboutBox.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FAboutBox.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FAboutBox.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.ECurrentDateChangedArgs">
            <summary>
            選択行が変わったのでカレント日が変わった
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.ECurrentDateChangedArgs.ScheduleDate">
            <summary>
            カレントのスケジュール日
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.ECurrentDateChangedArgs.#ctor(TimeTableManager.Element.CScheduledDate)">
            <summary>
            コンストラクタ
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:TimeTableManager.UI.ESelectionChangedEventArg">
            <summary>選択内容が変わったイベント
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.ESelectionChangedEventArg.TimeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.ESelectionChangedEventArg.SelectedDates">
            <summary>
            カレントのスケジュール日
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.ESelectionChangedEventArg.MaximumSelection">
            <summary>
            選択された日付の終わり
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.ESelectionChangedEventArg.MinimumSelection">
            <summary>
            選択された日付の始まり
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.ESelectionChangedEventArg.SelectedDateCount">
            <summary>
            選択された日付の日数
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.ESelectionChangedEventArg.SelectedDate(System.Int32)">
            <summary>
            選択された日付
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.UI.ESelectionChangedEventArg.#ctor(System.Collections.Generic.List{System.DateTime},TimeTableManager.Element.CTimeTable)">
            <summary>
            コンストラクタ
            </summary>
            <param name="source">イベントの発生元</param>
            <param name="table">タイムテーブル</param>
        </member>
        <member name="T:TimeTableManager.UI.FCSVExport">
            <summary>CSVエクスポートダイアログ
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FCSVExport.timeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FCSVExport.startDate">
            <summary>開始日、終了日
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FCSVExport.endDate">
            <summary>開始日、終了日
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FCSVExport.TimeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FCSVExport.StartDate">
            <summary>開始日
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FCSVExport.EndDate">
            <summary>終了日
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.BtnOutFile_Click(System.Object,System.EventArgs)">
            <summary>参照／テキストボックスにファイル名を設定する
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.BtnCancel_Click(System.Object,System.EventArgs)">
            <summary>閉じる
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="T:TimeTableManager.UI.FCSVExport.OutputColumnMethod">
            <summary>CSVに列を出力する
            </summary>
            <param name="date"></param>
            <param name="member"></param>
            <param name="head"></param>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.BtnExport_Click(System.Object,System.EventArgs)">
            <summary>出力実行
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.ReturnDate(System.DateTime,TimeTableManager.Element.CMember,System.Boolean)">
            <summary>日付を返す
            </summary>
            <param name="date"></param>
            <param name="member"></param>
            <param name="head"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.ConvertColumn(System.String)">
            <summary>値のカンマとダブルクォーテーションを変換する
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.ReturnRequireName(System.DateTime,TimeTableManager.Element.CMember,System.Boolean)">
            <summary>人員配置名を返す
            </summary>
            <param name="date"></param>
            <param name="member"></param>
            <param name="head"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.ReturnPatternName(System.DateTime,TimeTableManager.Element.CMember,System.Boolean)">
            <summary>勤務シフト名を返す
            </summary>
            <param name="date"></param>
            <param name="member"></param>
            <param name="head"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.ReturnPatternStart(System.DateTime,TimeTableManager.Element.CMember,System.Boolean)">
            <summary>勤務シフト開始を返す
            </summary>
            <param name="date"></param>
            <param name="member"></param>
            <param name="head"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.ReturnPatternLength(System.DateTime,TimeTableManager.Element.CMember,System.Boolean)">
            <summary>勤務シフトの長さを返す
            </summary>
            <param name="date"></param>
            <param name="member"></param>
            <param name="head"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.ReturnPatternEnd(System.DateTime,TimeTableManager.Element.CMember,System.Boolean)">
            <summary>勤務シフトの終了を返す
            </summary>
            <param name="date"></param>
            <param name="member"></param>
            <param name="head"></param>
            <returns></returns>
        </member>
        <member name="F:TimeTableManager.UI.FCSVExport.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.UI.FCSVExport.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.EnmCSVItem">
            <summary>CSV出力アイテム
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.EnmCSVItem.ItmDate">
            <summary>日付</summary>
        </member>
        <member name="F:TimeTableManager.UI.EnmCSVItem.ItmRequireName">
            <summary>人員配置名称</summary>
        </member>
        <member name="F:TimeTableManager.UI.EnmCSVItem.ItmPatternName">
            <summary>勤務シフト名</summary>
        </member>
        <member name="F:TimeTableManager.UI.EnmCSVItem.ItmPatternStart">
            <summary>勤務シフト開始</summary>
        </member>
        <member name="F:TimeTableManager.UI.EnmCSVItem.ItmPatternLength">
            <summary>勤務シフトの長さ</summary>
        </member>
        <member name="F:TimeTableManager.UI.EnmCSVItem.ItmPatternEnd">
            <summary>勤務シフトの終了</summary>
        </member>
        <member name="T:TimeTableManager.UI.FDayOffDialog">
            <summary>DayOffDialog の概要の説明です。
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FDayOffDialog.dayoff">
            <summary>内部の休日</summary>
        </member>
        <member name="F:TimeTableManager.UI.FDayOffDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FDayOffDialog.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FDayOffDialog.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FDayOffDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FDayOffDialog.DayOff">
            <summary>
            編集する休日
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FDisplayCalendarDialog">
            <summary>
            DisplayCalendarDialog の概要の説明です。
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FDisplayCalendarDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FDisplayCalendarDialog.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FDisplayCalendarDialog.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FDisplayCalendarDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FDisplayCalendarDialog.StartDate">
            <summary>
            表示期間の開始
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FDisplayCalendarDialog.EndDate">
            <summary>
            表示期間の終了
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FFooterConfigDialog">
            <summary>印刷フッタの設定ダイアログ
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FFooterConfigDialog.timeTable">
            <summary>
            タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FFooterConfigDialog.TimeTable">
            <summary>
            タイムテーブル
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FFooterConfigDialog.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FFooterConfigDialog.btnFont_Click(System.Object,System.EventArgs)">
            <summary>
            フォントの選択
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FFooterConfigDialog.btnOK_Click(System.Object,System.EventArgs)">
            <summary>
            OK
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FFooterConfigDialog.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            キャンセル
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FFooterConfigDialog.FooterConfigDialog_Shown(System.Object,System.EventArgs)">
            <summary>
            初期値
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="F:TimeTableManager.UI.FFooterConfigDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FFooterConfigDialog.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.UI.FFooterConfigDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FHeaderConfigDialog">
            <summary>印刷ヘッダの設定ダイアログ
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FHeaderConfigDialog.timeTable">
            <summary>
            タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FHeaderConfigDialog.TimeTable">
            <summary>
            タイムテーブル
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FHeaderConfigDialog.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FHeaderConfigDialog.btnLeftFont_Click(System.Object,System.EventArgs)">
            <summary>
            左側のフォント
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FHeaderConfigDialog.btnCenterFont_Click(System.Object,System.EventArgs)">
            <summary>
            中央のフォント
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FHeaderConfigDialog.btnRightFont_Click(System.Object,System.EventArgs)">
            <summary>
            右側のフォント
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FHeaderConfigDialog.btnOK_Click(System.Object,System.EventArgs)">
            <summary>
            OK
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FHeaderConfigDialog.btnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            キャンセル
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FHeaderConfigDialog.HeaderConfigDialog_Shown(System.Object,System.EventArgs)">
            <summary>
            初期値の設定
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="F:TimeTableManager.UI.FHeaderConfigDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FHeaderConfigDialog.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.UI.FHeaderConfigDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FImportDialog">
            <summary>ファイルをインポートするダイアログ
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FImportDialog.source">
            <summary>コピーするタイムテーブル
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FImportDialog.target">
            <summary>コピーするタイムテーブル
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FImportDialog.sourceName">
            <summary>コピー元のファイル名
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FImportDialog.Target">
            <summary>コピー先（現在のタイムテーブル）
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FImportDialog.Source">
            <summary>コピー元
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FImportDialog.SourceName">
            <summary>コピー元のファイル名
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.FImportDialog_Shown(System.Object,System.EventArgs)">
            <summary>コンボボックスを作成する
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.MakeMembers">
            <summary>メンバー一覧の作成
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.MakePatterns">
            <summary>勤務シフト一覧の作成
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.MakeRequires">
            <summary>人員配置一覧の作成
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.MakeDayOffs">
            <summary>休日一覧の作成
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.BtnCancel_Click(System.Object,System.EventArgs)">
            <summary>キャンセル
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.BtnOK_Click(System.Object,System.EventArgs)">
            <summary>インポートする
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.ImportMember(TimeTableManager.Element.CMember)">
            <summary>メンバーのインポート
            </summary>
            <param name="member">インポートするメンバー</param>
            <returns>成功：追加したエレメント／不成功：null</returns>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.ImportPattern(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトのインポート
            </summary>
            <param name="pattern">インポートする勤務シフト</param>
            <returns>成功：追加したエレメント／不成功：null</returns>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.ImportRequires(TimeTableManager.Element.CRequirePatterns)">
            <summary>人員配置のインポート
            </summary>
            <param name="requires">インポートする人員配置</param>
            <returns>成功：追加したエレメント／不成功：null</returns>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.ImportDayOff(TimeTableManager.Element.CDayOff)">
            <summary>休日のインポート
            </summary>
            <param name="dayoff">インポートする休日</param>
            <returns>成功：追加したエレメント／不成功：null</returns>
        </member>
        <member name="F:TimeTableManager.UI.FImportDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.UI.FImportDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FMainForm">
            <summary>
            メイン画面
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FMainForm.ClipBoardObject">
            <summary>テキストをタブ区切りに変換するクラス
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.ClipBoardObject.#ctor(System.String)">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.ClipBoardObject.Item(System.Int32,System.Int32)">
            <summary>文字列
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.ClipBoardObject.GetRowCount">
            <summary>行数
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.ClipBoardObject.GetColumnCount(System.Int32)">
            <summary>列数
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.title0">
            <summary>営業時間の変更ダイアログのメッセージ</summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.message0">
            <summary>営業時間の変更ダイアログのメッセージ</summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.message1">
            <summary>営業時間の変更ダイアログのメッセージ</summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.message2">
            <summary>営業時間の変更ダイアログのメッセージ</summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.TimeTableEdited">
            <summary>タイムテーブルは編集済み？
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.Randomizer">
            <summary>ランダム化する装置
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.TimeTable">
            <summary>編集中のタイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.FileName">
            <summary>編集中のタイムテーブルのファイル名
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.NextMonthDay">
            <summary>この以後は次の月にする
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.DayAfter">
            <summary>当日からこの日数分は自動設定しない
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.isEditHistory">
            <summary>過去の編集を可能にする
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.splash">
            <summary>スプラッシュウインドウ
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.IsEditHistory">
            <summary>過去の編集を可能にする
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.cancelDialog">
            <summary>自動設定のキャンセルダイアログ
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.CancelDialog">
            <summary>自動設定のキャンセルダイアログ
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.instance">
            <summary>いはゆるシングルトン
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.MaxItemCount">
            <summary>アイテム数の上限</summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.Instance">
            <summary>いはゆるシングルトン
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.Recents">
            <summary>最近使用したファイル
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.plugins">
            <summary>プラグインの一覧
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.Plugins">
            <summary>プラグインの一覧
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.FMainForm_OnFileSave(System.Object,TimeTableManager.UI.TimeTableChangedEventArgs)">
            <summary>ファイルを保存しました
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.FMainForm_OnFileOpen(System.Object,TimeTableManager.UI.TimeTableChangedEventArgs)">
            <summary>ファイルを開きました。
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.ReadUserSettings">
            <summary>ユーザーごとの設定の読み取り
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.ResetSelection">
            <summary>選択行
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniOpen_Click(System.Object,System.EventArgs)">
            <summary>ファイルを開く
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.OpenFile(System.String)">
            <summary>ファイルを開く
            </summary>
            <param name="pFileName">ファイル名</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.timeTable_OnScheduleDateRequirePatternsEdited(System.Object,TimeTableManager.Element.EScheduleDateRequirePatternsEditedEventArgs)">
            <summary>人員配置が編集されたらタイムテーブルが編集されたことにする
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.timeTable_OnRequirePatternssEdited(System.Object,TimeTableManager.Element.ERequirePatternssEditedEventArgs)">
            <summary>人員配置が編集されたらタイムテーブルが編集されたことにする
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.timeTable_OnPropertyChanged(System.Object,TimeTableManager.Element.EPropertyChangedEventArgs)">
            <summary>プロパティ変更でタイムテーブルが編集されたことにする
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.timeTable_OnPatternsEdited(System.Object,TimeTableManager.Element.EPatternsEditedEventArgs)">
            <summary>パターンが編集されたときタイムテーブルが編集されたことにする
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.timeTable_OnMembersEdited(System.Object,TimeTableManager.Element.EMembersEditedEventArgs)">
            <summary>メンバーが編集されたときタイムテーブルが編集されたことにする
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.Grid_RowEnter(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>行が変わった
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.timeTable_OnScheduleEdited(System.Object,TimeTableManager.Element.EScheduleEditedEventArgs)">
            <summary>スケジュールが変更されました
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniConfig_Click(System.Object,System.EventArgs)">
            <summary>設定表示
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.ScanPatternStartEnd">
            <summary>勤務シフトとタイムテーブルの開始・終了をスキャンする
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniPeriod_Click(System.Object,System.EventArgs)">
            <summary>期間設定 
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniAutoAll1_Click(System.Object,System.EventArgs)">
            <summary>自動設定１（全体）
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.AutoAllForeGround">
            <summary>フォアグラウンドで実行する
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.AutoAllBackGround">
            <summary>バックグラウンドで実行する
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.bg_DoWorkAll(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>バックグラウンド実行の本体
            </summary>
            <param name="sender">ワーカー</param>
            <param name="e">イベントオブジェクト</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.bg_RunWorkerCompletedAll(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>バックグラウンド実行の終了処理
            </summary>
            <param name="sender">ワーカー</param>
            <param name="e">イベントオブジェクト</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniAutoRow1_Click(System.Object,System.EventArgs)">
            <summary>自動設定１（行）
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.AutoRowForeGround">
            <summary>フォアグラウンドで実行する
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.AutoRowBackGround">
            <summary>バックグラウンドで実行する
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.bg_DoWorkRow(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>バックグラウンド実行の本体
            </summary>
            <param name="sender">ワーカー</param>
            <param name="e">イベントオブジェクト</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.bg_RunWorkerCompletedRow(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>バックグラウンド実行の終了処理
            </summary>
            <param name="sender">ワーカー</param>
            <param name="e">イベントオブジェクト</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniSave_Click(System.Object,System.EventArgs)">
            <summary>上書き保存する
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniSaveAs_Click(System.Object,System.EventArgs)">
            <summary>名前を付けて保存
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.ResetResent(System.String)">
            <summary>最近使ったファイルを更新する
            </summary>
            <param name="FileName">ファイル名</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniDel_Click(System.Object,System.EventArgs)">
            <summary>行クリア
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniCopy_Click(System.Object,System.EventArgs)">
            <summary>コピー処理
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniPaste_Click(System.Object,System.EventArgs)">
            <summary>貼り付け
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniPreview_Click(System.Object,System.EventArgs)">
            <summary>印刷プレビュー
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniPrint_Click(System.Object,System.EventArgs)">
            <summary>印刷
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.SetMessage(System.String)">
            <summary>ステータスバーにメッセージを表示する
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.SetStatusMessage(System.String)">
            <summary>ステータスバーにメッセージを表示する
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MnuFile_Popup(System.Object,System.EventArgs)">
            <summary>最近使ったファイルって作り直せる？
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniRecentFile_Click(System.Object,System.EventArgs)">
            <summary>最近使ったファイルを開く
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.FMainForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>終了時の保存
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.FMainForm_Shown(System.Object,System.EventArgs)">
            <summary>初回起動時
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniPrintSetting_Click(System.Object,System.EventArgs)">
            <summary>印刷設定
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="T:TimeTableManager.UI.FMainForm.CurrentDateChangedEventHandler">
            <summary>カレントの日付が変更された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="E:TimeTableManager.UI.FMainForm.OnCurrentDateChanged">
            <summary>カレントの日付が変更されたイベント
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.CurrentDateChanged(System.DateTime)">
            <summary>カレントの日付が変更された
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FMainForm.ViewSelectionChangedEventHandler">
            <summary>ビューの選択行が変わったときのイベント処理対応
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="E:TimeTableManager.UI.FMainForm.OnViewSelectionChanged">
            <summary>ビューの選択行が変わったときのイベント処理対応
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.ViewSelectionChanged(System.Collections.Generic.List{System.DateTime})">
            <summary>ビューの選択行が変わりました
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.CurrentDateChanged">
            <summary>カレントの日付が変更された
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.MinimumSelection">
            <summary>選択された日付の始まり
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.MaximumSelection">
            <summary>選択された日付の終わり
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.SelectedDateCount">
            <summary>選択された日付の日数
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.SelectedDate(System.Int32)">
            <summary>選択された日付
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.UI.FMainForm.SelectedDates">
            <summary>選択された日付
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FMainForm.DisplayPeriodChangedEventHandler">
            <summary>表示期間が変更になった
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
            <returns></returns>
        </member>
        <member name="E:TimeTableManager.UI.FMainForm.OnDisplayPeriodChanged">
            <summary>表示期間が変更になった
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.ScheduleViewer1_OnDisplayPeriodChanged(System.Object,TimeTableManager.Component.DisplayPeriodChangedEventArgs)">
            <summary>表示期間が変更になった
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FMainForm.FileOpenEventHandler">
            <summary>ファイルが開いたとき 
            </summary>
        </member>
        <member name="E:TimeTableManager.UI.FMainForm.OnFileOpen">
            <summary>ファイルが開いたとき 
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FMainForm.FileSaveEventHandler">
            <summary>ファイルを保存したとき
            </summary>
        </member>
        <member name="E:TimeTableManager.UI.FMainForm.OnFileSave">
            <summary>ファイルを保存したとき
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniNew_Click(System.Object,System.EventArgs)">
            <summary>新規作成
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.NewFile">
            <summary>新規作成
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniQuit_Click(System.Object,System.EventArgs)">
            <summary>終了
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniCut_Click(System.Object,System.EventArgs)">
            <summary>切り取り
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.TbbCut_Click(System.Object,System.EventArgs)">
            <summary>切り取り
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniRecentFile_Click_1(System.Object,System.EventArgs)">
            <summary>最近使用したファイル
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.SetSelectedDate(System.DateTime)">
            <summary>ビューの特定の日付を選択する
            </summary>
            <param name="date">選択する日付</param>
        </member>
        <member name="E:TimeTableManager.UI.FMainForm.OnTimeTableAutoEdited">
            <summary>タイムテーブルが自動編集されました
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FMainForm.TimeTableAutoEditedEventHandler">
            <summary>タイムテーブルが自動編集されました
            </summary>
            <param name="sender">タイムテーブル</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniOption_Click(System.Object,System.EventArgs)">
            <summary>オプションダイアログ
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniHelpContents_Click(System.Object,System.EventArgs)">
            <summary>ヘルプを表示する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniHelpIndex_Click(System.Object,System.EventArgs)">
            <summary>ヘルプを表示する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.TbbHelp_Click(System.Object,System.EventArgs)">
            <summary>ヘルプを表示する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.FMainForm_Load(System.Object,System.EventArgs)">
            <summary>初期起動時スプラッシュウインドウを表示する
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniHelpVersion_Click(System.Object,System.EventArgs)">
            <summary>バージョン情報
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniExport_Click(System.Object,System.EventArgs)">
            <summary>エクスポートする
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MakePluginList">
            <summary>プラグインの一覧を作成する
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.MniPluginItem_Click(System.Object,System.EventArgs)">
            <summary>プラグインを実行する
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMainForm.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.timeTableEdited">
            <summary>タイムテーブルは編集済み？
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.randomizer">
            <summary>ランダム化する装置
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.timeTable">
            <summary>編集中のタイムテーブル
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.fileName">
            <summary>編集中のタイムテーブルのファイル名
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.recents">
            <summary>最近使ったファイル
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.resentItems">
            <summary>最近使ったファイル
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.selectedDates">
            <summary>うーむ
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMainForm.nextMonthDay">
            <summary>この以後は次の月にする
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.TimeTableChangedEventArgs">
            <summary>タイムテーブルが変更になった
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.TimeTableChangedEventArgs.FileName">
            <summary>変更されたファイル名
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.TimeTableChangedEventArgs.TimeTable">
            <summary>変更されたタイムテーブル
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.TimeTableChangedEventArgs.#ctor(TimeTableManager.Element.CTimeTable,System.String)">
            <summary>コンストラクタ
            </summary>
            <param name="source">タイムテーブル</param>
            <param name="name">ファイル名</param>
        </member>
        <member name="T:TimeTableManager.UI.TimeTableAutoEditType">
            <summary>イベントタイプ
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.TimeTableAutoEditType.Auto">
            <summary>自動化された</summary>
        </member>
        <member name="F:TimeTableManager.UI.TimeTableAutoEditType.Randomized">
            <summary>自動化された</summary>
        </member>
        <member name="F:TimeTableManager.UI.TimeTableAutoEditType.Paste">
            <summary>貼り付けされた</summary>
        </member>
        <member name="F:TimeTableManager.UI.TimeTableAutoEditType.Cut">
            <summary>切り取りされた</summary>
        </member>
        <member name="F:TimeTableManager.UI.TimeTableAutoEditType.Del">
            <summary>クリアされた</summary>
        </member>
        <member name="T:TimeTableManager.UI.TimeTableAutoEditedEventArgs">
            <summary>タイムテーブルが自動設定された
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.TimeTableAutoEditedEventArgs.TimeTable">
            <summary>自動設定されたタイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.TimeTableAutoEditedEventArgs.Type">
            <summary>イベントタイプ
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.TimeTableAutoEditedEventArgs.StartDate">
            <summary>自動設定の開始
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.TimeTableAutoEditedEventArgs.EndDate">
            <summary>自動設定の終了
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.TimeTableAutoEditedEventArgs.#ctor(TimeTableManager.Element.CTimeTable,TimeTableManager.UI.TimeTableAutoEditType,System.DateTime,System.DateTime)">
            <summary>コンストラクタ
            </summary>
            <param name="source">イベントの発生元（タイムテーブル）</param>
            <param name="Type">イベント種別</param>
            <param name="StartDate">イベントの開始日</param>
            <param name="EndDate">イベントの終了日</param>
        </member>
        <member name="T:TimeTableManager.UI.FMemberDialog">
            <summary>
            Form1 の概要の説明です。
            </summary>
            <summary>
            Form1 の概要の説明です。
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FMemberDialog.member">
            <summary>編集するメンバー
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMemberDialog.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FMemberDialog.Member">
            <summary>メンバー
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMemberDialog.Member2Components">
            <summary>メンバーからコンポーネントへ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMemberDialog.Components2Member">
            <summary>コンポーネントからメンバーへ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMemberDialog.btnOK_Click(System.Object,System.EventArgs)">
            <summary>OK
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FMemberDialog.MemberDialog_Shown(System.Object,System.EventArgs)">
            <summary>初期表示
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="F:TimeTableManager.UI.FMemberDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMemberDialog.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FMemberDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FPatternDialog">
            <summary>
            PatternDialog の概要の説明です。
            </summary>
            <summary>
            PatternDialog の概要の説明です。
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FPatternDialog.pattern">
            <summary>勤務シフト
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FPatternDialog.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FPatternDialog.btnOK_Click(System.Object,System.EventArgs)">
            <summary>OK
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="P:TimeTableManager.UI.FPatternDialog.Pattern">
            <summary>勤務シフト
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FPatternDialog.Components2Pattern">
            <summary>コンポーネントからシフトへ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FPatternDialog.Pattern2Components">
            <summary>勤務シフトからコンポーネントへ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FPatternDialog.PatternDialog_Shown(System.Object,System.EventArgs)">
            <summary>初期表示
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="F:TimeTableManager.UI.FPatternDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FPatternDialog.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FPatternDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FRequirePatternsDialog">
            <summary>
            RequirePatternsDialog の概要の説明です。
            </summary>
            <summary>
            RequirePatternsDialog の概要の説明です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FRequirePatternsDialog.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FRequirePatternsDialog.require">
            <summary>人員配置
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FRequirePatternsDialog.Require">
            <summary>人員配置
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FRequirePatternsDialog.RequirePatterns2Components">
            <summary>人員配置からコントロールに値をセットする
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FRequirePatternsDialog.Components2RequirePatterns">
            <summary>コントロールから人員配置に値をセットする
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FRequirePatternsDialog.RequiresList_Validated(System.Object,System.EventArgs)">
            <summary>合計人数を更新する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FRequirePatternsDialog.RequiresList_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>合計人数を更新する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FRequirePatternsDialog.DvRequires_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>合計人数を更新する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FRequirePatternsDialog.ResetTotalCount">
            <summary>合計人数を更新する
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FRequirePatternsDialog.btnOK_Click(System.Object,System.EventArgs)">
            <summary>OK
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FRequirePatternsDialog.RequirePatternsDialog_Shown(System.Object,System.EventArgs)">
            <summary>初期表示
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="F:TimeTableManager.UI.FRequirePatternsDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FRequirePatternsDialog.Dispose(System.Boolean)">
            <summary>
            使用されているリソースに後処理を実行します。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FRequirePatternsDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.NumericCell">
            <summary>数値をあらわすセル
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.NumericCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)">
            <summary>値の設定時
            </summary>
            <param name="formattedValue"></param>
            <param name="cellStyle"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="valueTypeConverter"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.UI.NumericCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>値の取得時
            </summary>
            <param name="value"></param>
            <param name="rowIndex"></param>
            <param name="cellStyle"></param>
            <param name="valueTypeConverter"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:TimeTableManager.UI.FResentFileDialog">
            <summary>最近使ったファイルダイアログ
            </summary>
            <summary>パーシャルクラス
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FResentFileDialog.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FResentFileDialog.SelectedFile">
            <summary>選択されたファイル
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FResentFileDialog.BtnOK_Click(System.Object,System.EventArgs)">
            <summary>OKボタンが押された
            </summary>
            <param name="sender">発生元</param>
            <param name="e">イベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FResentFileDialog.BtnCancel_Click(System.Object,System.EventArgs)">
            <summary>キャンセルボタンが押された
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FResentFileDialog.lstResentFile_DoubleClick(System.Object,System.EventArgs)">
            <summary>一覧がダブルクリックされた
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FResentFileDialog.ResentFileDialog_Shown(System.Object,System.EventArgs)">
            <summary>画面が表示されたとき最近使ったファイルの一覧を作成する
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FResentFileDialog.ShowRecents(System.Windows.Forms.Form)">
            <summary>最近使ったファイルダイアログを表示する
            </summary>
            <param name="owner">親画面（メインウインドウ）</param>
            <returns>選択されたファイル</returns>
        </member>
        <member name="F:TimeTableManager.UI.FResentFileDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FResentFileDialog.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.UI.FResentFileDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FScheduleConfigDialog">
            <summary>
            ScheduleConfigDialog の概要の説明です。
            </summary>
            <summary>
            ScheduleConfigDialog の概要の説明です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.btnOK_Click(System.Object,System.EventArgs)">
            <summary>OK処理
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.lstPatterns_DoubleClick(System.Object,System.EventArgs)">
            <summary>ダブルクリックでシフトの修正
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.ScheduleConfigDialog_VisibleChanged(System.Object,System.EventArgs)">
            <summary>コンボボックス等の初期値をセットする
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.SetInitialValues">
            <summary>初期値の設定
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.SetupDefaultRequireComobs">
            <summary>人員配置コンボボックスの再設定
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.SetUpDefaultRequireTable(System.Data.DataTable)">
            <summary>人員配置テーブルをセットアップする
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.SetUpDefaultRequireCombo(System.Data.DataTable,System.Windows.Forms.ComboBox,TimeTableManager.Element.CRequirePatterns)">
            <summary>人員配置コンボボックスをセットアップする
            </summary>
            <param name="table">データテーブル</param>
            <param name="combo">コンボボックス</param>
            <param name="require">人員配置</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.PatternToolBar_Click(System.Object,System.Windows.Forms.ToolBarButtonClickEventArgs)">
            <summary>勤務シフトの処理
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.RebuildPatternList">
            <summary>勤務シフトリストの再作成
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.MemberToolBar_Click(System.Object,System.Windows.Forms.ToolBarButtonClickEventArgs)">
            <summary>メンバーのツールバー処理
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.RebuildMemberList">
            <summary>メンバーリストの再作成
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.lstMembers_DoubleClick(System.Object,System.EventArgs)">
            <summary>ダブルクリックでメンバーの修正
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.RebuildHollyDayList">
            <summary>休日リストの再作成
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.HollyDayToolBar_ButtonClick(System.Object,System.Windows.Forms.ToolBarButtonClickEventArgs)">
            <summary>休日のツールバー処理
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.RebuildRequireList">
            <summary>人員配置リストの再作成
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.RequiresToolBar_ButtonClick(System.Object,System.Windows.Forms.ToolBarButtonClickEventArgs)">
            <summary>人員配置のツールバー処理
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.lstRequirePatterns_DoubleClick(System.Object,System.EventArgs)">
            <summary>ダブルクリックでシフトの修正
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.BtnMemberUp_Click(System.Object,System.EventArgs)">
            <summary>メンバーの優先度を上げる
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.BtnMemberDown_Click(System.Object,System.EventArgs)">
            <summary>メンバーの優先度を下げる
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FScheduleConfigDialog.TimeTable">
            <summary>タイムテーブルの設定／取得
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.ScheduleConfigDialog_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>イベント参照の削除
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.timeTable_OnRequirePatternssEdited(System.Object,TimeTableManager.Element.ERequirePatternssEditedEventArgs)">
            <summary>キャンセルが押されてもすでに変更されているので反映させる
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.timeTable_OnPatternsEdited(System.Object,TimeTableManager.Element.EPatternsEditedEventArgs)">
            <summary>キャンセルが押されてもすでに変更されているので反映させる
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.timeTable_OnMembersEdited(System.Object,TimeTableManager.Element.EMembersEditedEventArgs)">
            <summary>キャンセルが押されてもすでに変更されているので反映させる
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.timeTable_OnDayOffsEdited(System.Object,TimeTableManager.Element.EDayOffsEditedEventArgs)">
            <summary>キャンセルが押されてもすでに変更されているので反映させる
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.ScheduleConfigDialog_Shown(System.Object,System.EventArgs)">
            <summary>最初に表示された時のイベント
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.btnPrintHeaderConfig_Click(System.Object,System.EventArgs)">
            <summary>ヘッダー部の設定
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.btnPrintFooterConfig_Click(System.Object,System.EventArgs)">
            <summary>フッターの設定
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.btnHeaderFont_Click(System.Object,System.EventArgs)">
            <summary>ヘッダーのフォント
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.btnDateFont_Click(System.Object,System.EventArgs)">
            <summary>日付のフォント
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.btnBodyFont_Click(System.Object,System.EventArgs)">
            <summary>本体のフォント
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.DayOffList_DoubleClick(System.Object,System.EventArgs)">
            <summary>休日の修正（リストのダブルクリック時）
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.RebuildRemovedItems">
            <summary>削除済みアイテムの再編集
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.BtnResqMember_Click(System.Object,System.EventArgs)">
            <summary>メンバーの復活
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.BtnResqPattern_Click(System.Object,System.EventArgs)">
            <summary>勤務シフトの復活
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.BtnResqRequire_Click(System.Object,System.EventArgs)">
            <summary>人員配置の復活
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.BtnImport_Click(System.Object,System.EventArgs)">
            <summary>インポートダイアログを表示する
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.BtnRemoveOldItem_Click(System.Object,System.EventArgs)">
            <summary>古いアイテムを削除する 
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.RemoveItems">
            <summary>
            実際に古いアイテムを削除する
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FScheduleConfigDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FSplashScreen">
            <summary>スプラッシュスクリーン
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FSplashScreen.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="F:TimeTableManager.UI.FSplashScreen.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FSplashScreen.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.UI.FSplashScreen.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.UI.FToolsOptionDialog">
            <summary>オプションダイアログ
            </summary>
        </member>
        <member name="P:TimeTableManager.UI.FToolsOptionDialog.form">
            <summary>親画面
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FToolsOptionDialog.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FToolsOptionDialog.BtnOK_Click(System.Object,System.EventArgs)">
            <summary>ＯＫ
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FToolsOptionDialog.ToolsOptionDialog_Shown(System.Object,System.EventArgs)">
            <summary>初期値の設定
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FToolsOptionDialog.BtnConfigPlugin_Click(System.Object,System.EventArgs)">
            <summary>プラグインの設定ダイアログを開く
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.UI.FToolsOptionDialog.LstPlugins_DoubleClick(System.Object,System.EventArgs)">
            <summary>プラグインの設定ダイアログを開く
            </summary>
            <param name="sender">イベント発生元</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="F:TimeTableManager.UI.FToolsOptionDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.UI.FToolsOptionDialog.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.UI.FToolsOptionDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.CAbstractElement">
            <summary>タイムテーブルを構成する要素の共通部分
            </summary>
        </member>
        <member name="F:TimeTableManager.CAbstractElement.NullDate">
            <summary>ヌル日付の代わり
            </summary>
        </member>
        <member name="F:TimeTableManager.CAbstractElement.created">
            <summary>作成日
            </summary>
        </member>
        <member name="F:TimeTableManager.CAbstractElement.objectID">
            <summary>オブジェクトID
            </summary>
        </member>
        <member name="F:TimeTableManager.CAbstractElement.properties">
            <summary>プロパティ
            </summary>
        </member>
        <member name="F:TimeTableManager.CAbstractElement.removed">
            <summary>削除日
            </summary>
        </member>
        <member name="M:TimeTableManager.CAbstractElement.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="P:TimeTableManager.CAbstractElement.Created">
            <summary>作成日
            </summary>
        </member>
        <member name="P:TimeTableManager.CAbstractElement.NextID">
            <summary>次のID
            </summary>
        </member>
        <member name="M:TimeTableManager.CAbstractElement.GetEnumerator">
            <summary>プロパティのキーの一覧
            </summary>
            <returns>プロパティのキーの一覧</returns>
        </member>
        <member name="P:TimeTableManager.CAbstractElement.Removed">
            <summary>削除日
            </summary>
        </member>
        <member name="M:TimeTableManager.CAbstractElement.GetProperty(System.String)">
            <summary>プロパティ
            </summary>
            <param name="key">キー</param>
            <returns>値</returns>
        </member>
        <member name="M:TimeTableManager.CAbstractElement.IsAvailable(System.DateTime)">
            <summary>このエレメントは有効か？
            </summary>
            <param name="now">日付</param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.CAbstractElement.IsAvailable(System.DateTime,System.DateTime)">
            <summary>このエレメントは有効か？
            </summary>
            <param name="param0">開始</param>
            <param name="param1">終了</param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.CAbstractElement.SetAvailable(System.Boolean)">
            <summary>このエレメントは有効かどうかを設定する
            </summary>
            <param name="available">有効／無効の設定</param>
        </member>
        <member name="M:TimeTableManager.CAbstractElement.SetAvailable(System.Boolean,System.DateTime)">
            <summary>このエレメントは有効かどうかを設定する
            </summary>
            <param name="available">有効／無効の設定</param>
            <param name="removed">無効になった日付</param>
        </member>
        <member name="M:TimeTableManager.CAbstractElement.SetProperty(System.String,System.String)">
            <summary>プロパティのセット
            </summary>
            <param name="key">キー</param>
            <param name="pValue">値</param>
        </member>
        <member name="P:TimeTableManager.CAbstractElement.TimeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="M:TimeTableManager.CAbstractElement.CompareTo(System.Object)">
            <summary>比較する
            </summary>
            <param name="obj">比較対照</param>
            <returns>1:thisが大きい,2:objが大きい,0:等しい</returns>
        </member>
        <member name="P:TimeTableManager.CAbstractElement.ObjectID">
            <summary>オブジェクトID
            </summary>
        </member>
        <member name="P:TimeTableManager.CAbstractElement.Item(System.String)">
            <summary>プロパティ
            </summary>
        </member>
        <member name="F:TimeTableManager.CAbstractElement.notes">
            <summary>メモ
            </summary>
        </member>
        <member name="P:TimeTableManager.CAbstractElement.Notes">
            <summary>メモ
            </summary>
        </member>
        <member name="P:TimeTableManager.CAbstractElement.BuiltIn">
            <summary>これはビルトインオブジェクトですか？
            </summary>
        </member>
        <member name="T:TimeTableManager.Element.CDayOff">
            <summary>休日
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CDayOff.#ctor(TimeTableManager.ElementCollection.CDayOffCollection)">
            <summary>コンストラクタ
            </summary>
            <param name="parent">休日の一覧</param>
        </member>
        <member name="P:TimeTableManager.Element.CDayOff.StartDate">
            <summary>
            休日の開始
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CDayOff.EndDate">
            <summary>
            休日の終了
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CDayOff.TimeTable">
            <summary>
            タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CDayOff.Name">
            <summary>
            休日の名称
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CDayOff.Removed">
            <summary>
            削除日
            </summary>
        </member>
        <member name="T:TimeTableManager.Element.CDefaultFavoriteRandomizer">
            <summary>ランダム化する（デフォルト）
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CDefaultFavoriteRandomizer.RANDNAME">
            <summary>名称
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CDefaultFavoriteRandomizer.table">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CDefaultFavoriteRandomizer.random">
            <summary>乱数発生装置
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CDefaultFavoriteRandomizer.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CDefaultFavoriteRandomizer.Name">
            <summary>名称
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CDefaultFavoriteRandomizer.dayAfter">
            <summary>当日からこの日数分は自動設定しない
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CDefaultFavoriteRandomizer.DayAfter">
            <summary>当日からこの日数分は自動設定しない
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CDefaultFavoriteRandomizer.Random1">
            <summary> 乱数発生装置
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CDefaultFavoriteRandomizer.Table">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CDefaultFavoriteRandomizer.AutoAllwithChief(TimeTableManager.Element.CTimeTable,System.DateTime)">
            <summary>自動設定する
            </summary>
            <param name="ptable">設定するタイムテーブル</param>
            <param name="Adate">開始</param>
        </member>
        <member name="M:TimeTableManager.Element.CDefaultFavoriteRandomizer.AutoAllwithChief(TimeTableManager.Element.CTimeTable,System.DateTime,System.DateTime)">
            <summary>自動設定する
            </summary>
            <param name="ptable">設定するタイムテーブル</param>
            <param name="start">開始</param>
            <param name="end">終了</param>
        </member>
        <member name="M:TimeTableManager.Element.CDefaultFavoriteRandomizer.AutoAllwithChief(TimeTableManager.Element.CTimeTable,System.DateTime,System.DateTime,System.DateTime)">
            <summary>自動設定する
            </summary>
            <param name="ptable">設定するタイムテーブル</param>
            <param name="today">基準日</param>
            <param name="start">開始</param>
            <param name="end">終了</param>
        </member>
        <member name="M:TimeTableManager.Element.CDefaultFavoriteRandomizer.AutoAllwithChief(TimeTableManager.Element.CScheduledDate)">
            <summary> メンバーとシフトの好みの組み合わせを自動設定してみる。
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CDefaultFavoriteRandomizer.SetFavoriteMemberStand(TimeTableManager.Element.CScheduledDate,TimeTableManager.Element.CMember)">
            <summary> メンバーのシフトの好みを自動設定する
            </summary>
            <param name="sDate">スケジュール化された（自動設定対象の）日付</param>
            <param name="member">設定するメンバー</param>
        </member>
        <member name="M:TimeTableManager.Element.CDefaultFavoriteRandomizer.SetFavoriteMemberStand(TimeTableManager.Element.CScheduledDate,TimeTableManager.Element.CMember,System.Boolean)">
            <summary> メンバーのシフトの好みを自動設定する
            </summary>
            <param name="sDate">スケジュール化された（自動設定対象の）日付</param>
            <param name="member">設定するメンバー</param>
            <param name="force">休みを気にするかどうか</param>
        </member>
        <member name="M:TimeTableManager.Element.CDefaultFavoriteRandomizer.SetFavoritePatternStand(TimeTableManager.Element.CScheduledDate,TimeTableManager.Element.CPattern)">
            <summary> シフトのメンバーの好みを自動設定する
            </summary>
            <param name="sDate">スケジュール化された（自動設定対象の）日付</param>
            <param name="pattern">設定するシフト</param>
        </member>
        <member name="M:TimeTableManager.Element.CDefaultFavoriteRandomizer.CopyFavorites(TimeTableManager.Element.CScheduledDate,TimeTableManager.Element.CScheduledDate)">
            <summary>好みをコピーする
            </summary>
            <param name="src">元</param>
            <param name="dst">先</param>
        </member>
        <member name="T:TimeTableManager.Element.CMonthlyFavoriteRandomizer">
            <summary>１ヶ月同じシフトを繰り返す
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMonthlyFavoriteRandomizer.RANDNAME">
            <summary>名称
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CMonthlyFavoriteRandomizer.Name">
            <summary>名称
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CMonthlyFavoriteRandomizer.AutoAllwithChief(TimeTableManager.Element.CScheduledDate)">
            <summary>オーバーライド
            </summary>
            <param name="sDate"></param>
        </member>
        <member name="T:TimeTableManager.Element.CWeeklyFavoriteRandomizer">
            <summary>１週間同じシフトを繰り返す
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CWeeklyFavoriteRandomizer.RANDNAME">
            <summary>名称
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CWeeklyFavoriteRandomizer.Name">
            <summary>名称
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CWeeklyFavoriteRandomizer.AutoAllwithChief(TimeTableManager.Element.CScheduledDate)">
            <summary>オーバーライド
            </summary>
            <param name="sDate"></param>
        </member>
        <member name="T:TimeTableManager.Element.CMonthlyWeeklyFavoriteRandomizer">
            <summary>１ヶ月同じ曜日ごとにシフトを繰り返す
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMonthlyWeeklyFavoriteRandomizer.RANDNAME">
            <summary>名称
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CMonthlyWeeklyFavoriteRandomizer.Name">
            <summary>名称
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CMonthlyWeeklyFavoriteRandomizer.AutoAllwithChief(TimeTableManager.Element.CScheduledDate)">
            <summary>オーバーライド
            </summary>
            <param name="sDate"></param>
        </member>
        <member name="T:TimeTableManager.Element.CMember">
            <summary>メンバー
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMember.NULL">
            <summary>ナル値の替わり
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMember.name">
            <summary>メンバー名 
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMember.IsChief">
            <summary>このメンバーはチーフかどうか 
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMember.expectedRest">
            <summary>このメンバーの休みの割合の期待値 
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMember.expectedWork">
            <summary>このメンバーの勤務時間の平均の期待値 
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMember.parent">
            <summary>メンバーコレクション 
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMember.priority">
            <summary>このメンバーの表示順 
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMember.selectedpatterns">
            <summary>このメンバーが就労可能なシフト 
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMember.availDay">
            <summary>稼働日
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMember.continuas">
            <summary>連続稼働日
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CMember.spacetime">
            <summary>稼動間隔
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CMember.ExpectedRest">
            <summary>休みの割合
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CMember.ExpectedWork">
            <summary>稼働時間
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CMember.Name">
            <summary>メンバー名
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CMember.PatternSize">
            <summary>勤務シフト数
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CMember.Priority">
            <summary>優先順位
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CMember.TimeTable">
            <summary>スケジュール全て 
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CMember.#ctor(TimeTableManager.ElementCollection.CMemberCollection)">
            <summary>コンストラクタ
            </summary>
            <param name="parent">メンバーコレクション</param>
        </member>
        <member name="M:TimeTableManager.Element.CMember.#ctor(TimeTableManager.ElementCollection.CMemberCollection,System.Int64)">
            <summary>コンストラクタ
            </summary>
            <param name="parent">メンバーコレクション</param>
            <param name="id">メンバーのID</param>
        </member>
        <member name="M:TimeTableManager.Element.CMember.AddPattern(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトの追加
            </summary>
            <param name="pattern">追加するシフト</param>
        </member>
        <member name="M:TimeTableManager.Element.CMember.GetPattern(System.Int32)">
            <summary>勤務シフトの取得
            </summary>
            <param name="n">n番目</param>
            <returns>勤務シフト</returns>
        </member>
        <member name="M:TimeTableManager.Element.CMember.RemovePattern(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトの削除
            </summary>
            <param name="pattern">削除するシフト</param>
        </member>
        <member name="P:TimeTableManager.Element.CMember.Item(System.Int32)">
            <summary>勤務シフト
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CMember.ClearPatterns">
            <summary>勤務シフトをクリアする
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CMember.Contains(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトを含んでいるか？
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CMember.IsAvailableDay(System.Int32)">
            <summary>指定された曜日は稼働日かどうか
            </summary>
            <param name="weekday">曜日をあらわすint</param>
            <returns>true:稼働日 false:休み</returns>
        </member>
        <member name="M:TimeTableManager.Element.CMember.SetAvailableDay(System.Int32,System.Boolean)">
            <summary>指定された曜日を稼働日とするかどうか
            </summary>
            <param name="weekday">曜日をあらわすint</param>
            <param name="available">true:稼働日 false:休み</param>
        </member>
        <member name="M:TimeTableManager.Element.CMember.IsAvalableDay(System.DayOfWeek)">
            <summary>指定された曜日は稼働日かどうか
            </summary>
            <param name="weekday">曜日</param>
            <returns>true:稼働日 false:休み</returns>
        </member>
        <member name="M:TimeTableManager.Element.CMember.SetAvailableDay(System.DayOfWeek,System.Boolean)">
            <summary>指定された曜日を稼働日とするかどうか
            </summary>
            <param name="weekday">曜日</param>
            <param name="available">true:稼働日 false:休み</param>
        </member>
        <member name="M:TimeTableManager.Element.CMember.IsAvalableDay(System.DateTime)">
            <summary>指定された日は稼働日かどうか
            </summary>
            <param name="date">日付</param>
            <returns>true:稼働日 false:休み</returns>
        </member>
        <member name="P:TimeTableManager.Element.CMember.Continuas">
            <summary>連続して稼動してよい日数
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CMember.Spacetime">
            <summary>稼動間隔
            稼動と稼動の間に必要な時間
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CMember.ContinuasInt">
            <summary>連続して稼動してよい日数
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CMember.SpacetimeInt">
            <summary>稼動間隔
            稼動と稼動の間に必要な時間
            </summary>
        </member>
        <member name="T:TimeTableManager.Element.NULL_MEMBER">
            <summary>Nullの替わり
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.NULL_MEMBER.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_MEMBER.Name">
            <summary>名無しの権兵衛
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.NULL_MEMBER.AddPattern(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトの追加不可
            </summary>
            <param name="pattern">勤務シフト</param>
        </member>
        <member name="T:TimeTableManager.Element.CPattern">
            <summary>勤務シフト
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CPattern.AllDay">
            <summary>一日中</summary>
        </member>
        <member name="F:TimeTableManager.Element.CPattern.ZeroDay">
            <summary>ゼロ時間</summary>
        </member>
        <member name="F:TimeTableManager.Element.CPattern.DAYOFF">
            <summary>休日</summary>
        </member>
        <member name="F:TimeTableManager.Element.CPattern.MULTI">
            <summary>複数選択されている場合</summary>
        </member>
        <member name="F:TimeTableManager.Element.CPattern.NULL">
            <summary>ナル値の替わり</summary>
        </member>
        <member name="F:TimeTableManager.Element.CPattern.name">
            <summary>勤務シフト名 </summary>
        </member>
        <member name="F:TimeTableManager.Element.CPattern.parent">
            <summary>親オブジェクト(シフトコレクション) </summary>
        </member>
        <member name="F:TimeTableManager.Element.CPattern.start">
            <summary>開始時間</summary>
        </member>
        <member name="F:TimeTableManager.Element.CPattern.scope">
            <summary>開始から終了まで</summary>
        </member>
        <member name="F:TimeTableManager.Element.CPattern.rest">
            <summary>休憩時間</summary>
        </member>
        <member name="P:TimeTableManager.Element.CPattern.Name">
            <summary>
            シフト名
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CPattern.Rest">
            <summary>
            休憩時間
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CPattern.TimeTable">
            <summary>
            タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CPattern.Scope">
            <summary>
            期間の取得
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CPattern.Start">
            <summary>
            開始時刻
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CPattern.End">
            <summary>
            終了時刻
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CPattern.Over">
            <returns>
            日付を超えているかどうか
            </returns>
        </member>
        <member name="M:TimeTableManager.Element.CPattern.#ctor(TimeTableManager.ElementCollection.CPatternCollection)">
            <summary>
            シフト（コンストラクタ）
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CPattern.#ctor(TimeTableManager.ElementCollection.CPatternCollection,System.Int32)">
            <summary>
            シフト（コンストラクタ）
            </summary>
        </member>
        <member name="T:TimeTableManager.Element.NOWORK_PATTERN">
            <summary>休みシフト(-9999)
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.NOWORK_PATTERN.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NOWORK_PATTERN.Name">
            <summary>
            シフト名
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NOWORK_PATTERN.Rest">
            <summary>
            休憩時間
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NOWORK_PATTERN.Scope">
            <summary>
            期間の取得
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NOWORK_PATTERN.Start">
            <summary>
            開始時刻
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NOWORK_PATTERN.Over">
            <returns>
            日付を超えているかどうか
            </returns>
        </member>
        <member name="P:TimeTableManager.Element.NOWORK_PATTERN.ObjectID">
            <summary>オブジェクトIDのオーバーライド
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NOWORK_PATTERN.BuiltIn">
            <summary>ビルトインオブジェクトのオーバーライド
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NOWORK_PATTERN.Created">
            <summary>作成日は日付の最小値
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NOWORK_PATTERN.Removed">
            <summary>常に削除されない
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.NOWORK_PATTERN.IsAvailable(System.DateTime)">
            <summary>常に有効
            </summary>
            <param name="now">日付にかかわらない</param>
            <returns>常に有効</returns>
        </member>
        <member name="M:TimeTableManager.Element.NOWORK_PATTERN.IsAvailable(System.DateTime,System.DateTime)">
            <summary>常に有効
            </summary>
            <param name="param0">日付にかかわらない</param>
            <param name="param1">日付にかかわらない</param>
            <returns>常に有効</returns>
        </member>
        <member name="T:TimeTableManager.Element.MULTI_PATTERN">
            <summary>複数シフト(-9998)
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.MULTI_PATTERN.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.MULTI_PATTERN.Name">
            <summary>
            シフト名
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.MULTI_PATTERN.Rest">
            <summary>
            休憩時間
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.MULTI_PATTERN.Scope">
            <summary>
            期間の取得
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.MULTI_PATTERN.Start">
            <summary>
            開始時刻
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.MULTI_PATTERN.Over">
            <returns>
            日付を超えているかどうか
            </returns>
        </member>
        <member name="P:TimeTableManager.Element.MULTI_PATTERN.ObjectID">
            <summary>オブジェクトIDのオーバーライド
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.MULTI_PATTERN.BuiltIn">
            <summary>ビルトインオブジェクトのオーバーライド
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.MULTI_PATTERN.Created">
            <summary>作成日は日付の最小値
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.MULTI_PATTERN.Removed">
            <summary>常に削除されない
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.MULTI_PATTERN.IsAvailable(System.DateTime)">
            <summary>常に有効
            </summary>
            <param name="now">日付にかかわらない</param>
            <returns>常に有効</returns>
        </member>
        <member name="M:TimeTableManager.Element.MULTI_PATTERN.IsAvailable(System.DateTime,System.DateTime)">
            <summary>常に有効
            </summary>
            <param name="param0">日付にかかわらない</param>
            <param name="param1">日付にかかわらない</param>
            <returns>常に有効</returns>
        </member>
        <member name="T:TimeTableManager.Element.NULL_PATTERN">
            <summary>NULLシフト(-10000)
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.NULL_PATTERN.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_PATTERN.Name">
            <summary>
            シフト名
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_PATTERN.Rest">
            <summary>
            休憩時間
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_PATTERN.Scope">
            <summary>
            期間の取得
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_PATTERN.Start">
            <summary>
            開始時刻
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_PATTERN.Over">
            <returns>
            日付を超えているかどうか
            </returns>
        </member>
        <member name="P:TimeTableManager.Element.NULL_PATTERN.ObjectID">
            <summary>オブジェクトIDのオーバーライド
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_PATTERN.BuiltIn">
            <summary>ビルトインオブジェクトのオーバーライド
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_PATTERN.Created">
            <summary>作成日は日付の最小値
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_PATTERN.Removed">
            <summary>常に削除されない
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.NULL_PATTERN.IsAvailable(System.DateTime)">
            <summary>常に有効
            </summary>
            <param name="now">日付にかかわらない</param>
            <returns>常に有効</returns>
        </member>
        <member name="M:TimeTableManager.Element.NULL_PATTERN.IsAvailable(System.DateTime,System.DateTime)">
            <summary>常に有効
            </summary>
            <param name="param0">日付にかかわらない</param>
            <param name="param1">日付にかかわらない</param>
            <returns>常に有効</returns>
        </member>
        <member name="T:TimeTableManager.Element.CRequirePatterns">
            <summary>
            人員配置
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CRequirePatterns.DAYOFF">
            <summary>休みの日
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CRequirePatterns.NULL">
            <summary>Nullの代わり
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CRequirePatterns.name">
            <summary>名前(初期値="")
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CRequirePatterns.parent">
            <summary>コレクション
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CRequirePatterns.patternList">
            <summary>勤務シフトのリスト
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CRequirePatterns.Requires">
            <summary>勤務シフト/人数のセット
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CRequirePatterns.ExtractedSize">
            <summary>展開された人数またはのべ人数
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CRequirePatterns.Name">
            <summary>名前
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CRequirePatterns.TimeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CRequirePatterns.ValidSize">
            <summary>人数が０より大きいシフトの数
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CRequirePatterns.#ctor(TimeTableManager.ElementCollection.CPatternCollection,TimeTableManager.ElementCollection.CRequirePatternsCollection)">
            <summary>コンストラクタ
            </summary>
            <param name="patternList">勤務シフトのリスト</param>
            <param name="parent">タイムテーブル</param>
        </member>
        <member name="M:TimeTableManager.Element.CRequirePatterns.GetExtractedPattern(System.Int32)">
            <summary>展開された人数
            </summary>
            <param name="n">何番目？</param>
            <returns>n番目のシフトの人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.CRequirePatterns.GetPattern(System.Int32)">
            <summary>勤務シフト
            </summary>
            <param name="n">何番目？</param>
            <returns>n番目のシフト</returns>
        </member>
        <member name="M:TimeTableManager.Element.CRequirePatterns.GetPatternTotal(System.TimeSpan)">
            <summary>指定された時間の稼動中（であるべき）人数
            </summary>
            <param name="time">時間（時刻）</param>
            <returns>指定された時間の稼動中（であるべき）人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.CRequirePatterns.GetRequire(TimeTableManager.Element.CPattern)">
            <summary>ターンの人数
            </summary>
            <param name="pattern">勤務シフト</param>
            <returns>人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.CRequirePatterns.GetValid(System.Int32)">
            <summary>有効な人数
            </summary>
            <param name="n">n番目？</param>
            <returns>n番目のシフトの人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.CRequirePatterns.SetRequire(TimeTableManager.Element.CPattern,System.Int32)">
            <summary>人員配置をセットする
            </summary>
            <param name="n">n番目？</param>
            <param name="require">n番目の人数</param>
        </member>
        <member name="M:TimeTableManager.Element.CRequirePatterns.Size">
            <summary>勤務シフトの数
            </summary>
            <returns>勤務シフトの数</returns>
        </member>
        <member name="M:TimeTableManager.Element.CRequirePatterns.GetPeriodTimes">
            <summary>区切りになる時間
            </summary>
            <returns>タイムスパンの配列</returns>
        </member>
        <member name="T:TimeTableManager.Element.DAYOFF_REQUIRE">
            <summary>休みの日の人員配置
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.DAYOFF_REQUIRE.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.DAYOFF_REQUIRE.ExtractedSize">
            <summary>展開された人数は常に０
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.DAYOFF_REQUIRE.Name">
            <summary>名前は常に”休み”
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.DAYOFF_REQUIRE.ValidSize">
            <summary>サイズは常に０
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.DAYOFF_REQUIRE.ObjectID">
            <summary>無効なオブジェクトIDを返す
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.DAYOFF_REQUIRE.GetExtractedPattern(System.Int32)">
            <summary>展開された人数
            </summary>
            <param name="n">何番目？</param>
            <returns>n番目のシフトの人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.DAYOFF_REQUIRE.GetPattern(System.Int32)">
            <summary>勤務シフト
            </summary>
            <param name="n">何番目？</param>
            <returns>n番目のシフト</returns>
        </member>
        <member name="M:TimeTableManager.Element.DAYOFF_REQUIRE.GetPatternTotal(System.TimeSpan)">
            <summary>指定された時間の稼動中（であるべき）人数
            </summary>
            <param name="time">時間（時刻）</param>
            <returns>指定された時間の稼動中（であるべき）人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.DAYOFF_REQUIRE.GetRequire(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトの人数を取得する
            </summary>
            <param name="pattern">勤務シフト</param>
            <returns>勤務シフトの人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.DAYOFF_REQUIRE.GetValid(System.Int32)">
            <summary>有効な人数
            </summary>
            <param name="n">n番目？</param>
            <returns>n番目のシフトの人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.DAYOFF_REQUIRE.SetRequire(TimeTableManager.Element.CPattern,System.Int32)">
            <summary>人員配置をセットする
            </summary>
            <param name="n">n番目？</param>
            <param name="require">n番目の人数</param>
        </member>
        <member name="M:TimeTableManager.Element.DAYOFF_REQUIRE.Size">
            <summary>勤務シフトの数
            </summary>
            <returns>勤務シフトの数</returns>
        </member>
        <member name="P:TimeTableManager.Element.DAYOFF_REQUIRE.BuiltIn">
            <summary>このオブジェクトはビルトインオブジェクトです
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.DAYOFF_REQUIRE.Created">
            <summary>作成日は日付の最小値
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.DAYOFF_REQUIRE.Removed">
            <summary>常に削除されない
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.DAYOFF_REQUIRE.IsAvailable(System.DateTime)">
            <summary>常に有効
            </summary>
            <param name="now">日付にかかわらない</param>
            <returns>常に有効</returns>
        </member>
        <member name="M:TimeTableManager.Element.DAYOFF_REQUIRE.IsAvailable(System.DateTime,System.DateTime)">
            <summary>常に有効
            </summary>
            <param name="param0">日付にかかわらない</param>
            <param name="param1">日付にかかわらない</param>
            <returns>常に有効</returns>
        </member>
        <member name="T:TimeTableManager.Element.NULL_REQUIRE">
            <summary>Nullの代わり
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.NULL_REQUIRE.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_REQUIRE.ExtractedSize">
            <summary>展開された人数は常に０
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_REQUIRE.Name">
            <summary>名前は常に””
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_REQUIRE.ValidSize">
            <summary>サイズは常に０
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_REQUIRE.ObjectID">
            <summary>無効なオブジェクトIDを返す
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.NULL_REQUIRE.GetExtractedPattern(System.Int32)">
            <summary>展開された人数
            </summary>
            <param name="n">何番目？</param>
            <returns>n番目のシフトの人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.NULL_REQUIRE.GetPattern(System.Int32)">
            <summary>勤務シフト
            </summary>
            <param name="n">何番目？</param>
            <returns>n番目のシフト</returns>
        </member>
        <member name="M:TimeTableManager.Element.NULL_REQUIRE.GetPatternTotal(System.TimeSpan)">
            <summary>指定された時間の稼動中（であるべき）人数
            </summary>
            <param name="time">時間（時刻）</param>
            <returns>指定された時間の稼動中（であるべき）人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.NULL_REQUIRE.GetRequire(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトの人数を取得する
            </summary>
            <param name="pattern">勤務シフト</param>
            <returns>勤務シフトの人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.NULL_REQUIRE.GetValid(System.Int32)">
            <summary>有効な人数
            </summary>
            <param name="n">n番目？</param>
            <returns>n番目のシフトの人数</returns>
        </member>
        <member name="M:TimeTableManager.Element.NULL_REQUIRE.SetRequire(TimeTableManager.Element.CPattern,System.Int32)">
            <summary>人員配置をセットする
            </summary>
            <param name="n">n番目？</param>
            <param name="require">n番目の人数</param>
        </member>
        <member name="M:TimeTableManager.Element.NULL_REQUIRE.Size">
            <summary>勤務シフトの数
            </summary>
            <returns>勤務シフトの数</returns>
        </member>
        <member name="P:TimeTableManager.Element.NULL_REQUIRE.BuiltIn">
            <summary>このオブジェクトはビルトインオブジェクトです
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_REQUIRE.Created">
            <summary>作成日は日付の最小値
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.NULL_REQUIRE.Removed">
            <summary>常に削除されない
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.NULL_REQUIRE.IsAvailable(System.DateTime)">
            <summary>常に有効
            </summary>
            <param name="now">日付にかかわらない</param>
            <returns>常に有効</returns>
        </member>
        <member name="M:TimeTableManager.Element.NULL_REQUIRE.IsAvailable(System.DateTime,System.DateTime)">
            <summary>常に有効
            </summary>
            <param name="param0">日付にかかわらない</param>
            <param name="param1">日付にかかわらない</param>
            <returns>常に有効</returns>
        </member>
        <member name="T:TimeTableManager.Element.CSchedule">
            <summary>メンバーと勤務シフトの組み合わせ
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CSchedule.Member">
            <summary>メンバー
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CSchedule.Pattern">
            <summary>勤務シフト
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CSchedule.StartTime">
            <summary>開始時間
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CSchedule.EndTime">
            <summary>終了時間
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CSchedule.TimeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CSchedule.Date">
            <summary>スケジュールの火
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CSchedule.member">
            <summary>このスケジュールのメンバー 
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CSchedule.parent">
            <summary>このスケジュールを格納する日付 
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CSchedule.pattern">
            <summary>このスケジュールのシフト 
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CSchedule.#ctor(TimeTableManager.Element.CScheduledDate)">
            <summary>コンストラクタ
            </summary>
            <param name="Parent">この組み合わせを保持する日付</param>
        </member>
        <member name="P:TimeTableManager.Element.CSchedule.Notes">
            <summary>メモ
            </summary>
        </member>
        <member name="T:TimeTableManager.Element.CScheduledDate">
            <summary>
            スケジュール化された日付
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CScheduledDate.Date">
            <summary>
            日付
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CScheduledDate.Require">
            <summary>
            人員配置
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CScheduledDate.TimeTable">
            <summary>
            親
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CScheduledDate.ValidMemberSize">
            <summary>
            有効なメンバーの数
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CScheduledDate.DayOff">
            <summary>
            今日は休みか？
            </summary>
        </member>
        <member name="T:TimeTableManager.Element.CScheduledDate.MemberCount">
            <summary>
            メンバーの数
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.MemberCount._cnt">
            <summary>字際にシフトに割り当てられた人数 </summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.MemberCount._max">
            <summary>勤務シフトに人員配置 </summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.MemberCount._pt">
            <summary>勤務シフト </summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.MemberCount.#ctor(TimeTableManager.Element.CScheduledDate,TimeTableManager.Element.CRequirePatterns)">
            <summary>メンバー数の作成</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.MemberCount.Add(System.Int32)">
            <summary>実際に割り当てられた人数の加算</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.MemberCount.Add(TimeTableManager.Element.CPattern)">
            <summary>実際に割り当てられた人数の加算</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.MemberCount.Addable(System.Int32)">
            <summary>人数は追加可能ですか？</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.MemberCount.Addable(TimeTableManager.Element.CPattern)">
            <summary>人数は追加可能ですか？</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.MemberCount.Id(TimeTableManager.Element.CPattern)">
            <summary>このオブジェクト内でのシフトの番号</summary>
        </member>
        <member name="T:TimeTableManager.Element.CScheduledDate.MembersPattern">
            <summary> メンバーのシフトに対する希望を管理する</summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.MembersPattern._m">
            <summary>メンバー </summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.MembersPattern._ps">
            <summary>勤務シフトの希望 </summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.MembersPattern.#ctor(TimeTableManager.Element.CScheduledDate,TimeTableManager.Element.CMember)">
            <summary>コンストラクタ</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.MembersPattern.GetPattern(System.Int32)">
            <summary>メンバーの好みのシフト</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.MembersPattern.SetPattern(System.Int32,TimeTableManager.Element.CPattern)">
            <summary>メンバーの好みのシフトをセット</summary>
        </member>
        <member name="T:TimeTableManager.Element.CScheduledDate.PatternsMember">
            <summary> シフトのメンバーに対する好みを管理する</summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.PatternsMember._ms">
            <summary>好みの順番</summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.PatternsMember._p">
            <summary>管理するシフト</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.PatternsMember.#ctor(TimeTableManager.Element.CScheduledDate,TimeTableManager.Element.CPattern)">
            <summary>コンストラクタ</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.PatternsMember.GetMember(System.Int32)">
            <summary>メンバー</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.PatternsMember.SetMember(System.Int32,TimeTableManager.Element.CMember)">
            <summary>勤務シフトの好みの設定</summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.DATE_FORMAT">
            <summary>ノードに保存する際の日付の表現形式 </summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.rnd">
            <summary>ランダム化に使用する </summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.MemberToMembersPattern">
            <summary>メンバーの好み </summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.PatternToPatternsMember">
            <summary>勤務シフトの好み </summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.date">
            <summary>日付 </summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.requirepatterns">
            <summary>人員配置のコレクション</summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.timeTable">
            <summary>（親オブジェクトである）タイムテーブル </summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.MemberToSchedule">
            <summary>スケジュールを保存する </summary>
        </member>
        <member name="F:TimeTableManager.Element.CScheduledDate.validMembers">
            <summary>有効なメンバー </summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.#ctor(System.DateTime,TimeTableManager.Element.CTimeTable)">
            <summary>スケジュール化された日の作成</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.#ctor(TimeTableManager.Element.CTimeTable)">
            <summary>スケジュール化された日の作成</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.Auto">
            <summary> 設定されたメンバーとシフトに対して組み合わせを作成する</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.CreateSchedule">
            <summary>スケジュールの作成</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetMemberRank(TimeTableManager.Element.CPattern,TimeTableManager.Element.CMember)">
            <summary>勤務シフトにおけるメンバーのランクを取得する</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetMembersPattern(TimeTableManager.Element.CMember,System.Int32)">
            <summary>メンバーのrank番目に好まれるシフトを取得する</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetMemberTotal(System.TimeSpan)">
            <summary>メンバーの合計 指定した時間で働く予定の人数</summary>
        </member>
        <member name="P:TimeTableManager.Element.CScheduledDate.ObjectID">
            <summary>このオブジェクトのIDは内部日付を"yyyyMMdd"で変換したint型とする</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetPatternsMember(TimeTableManager.Element.CPattern,System.Int32)">
            <summary>勤務シフトのrank番目に好まれるメンバーを取得する</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetPatternTotal(System.TimeSpan)">
            <summary>今の人員配置だとこの時間何人くらい必要なんだろう？</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetSchedule(System.Int32)">
            <summary>メンバーのスケジュールを取得する</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetSchedule(TimeTableManager.Element.CMember)">
            <summary>メンバーのスケジュールを取得する</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetValidMember(System.Int32)">
            <summary>有効なメンバーの取得</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.MakeMembers">
            <summary>有効なメンバーの設定</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.SetMemberRank(TimeTableManager.Element.CPattern,TimeTableManager.Element.CMember,System.Int32)">
            <summary>勤務シフトに対するメンバーのランクを設定する</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.SetPatternRank(TimeTableManager.Element.CMember,TimeTableManager.Element.CPattern,System.Int32)">
            <summary>メンバーに対するシフトのランクを設定する</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.SetSchedule(TimeTableManager.Element.CSchedule)">
            <summary>スケジュールをセットする</summary>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.#cctor">
            <summary>
            スタティック
            乱数初期化
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CScheduledDate.Item(TimeTableManager.Element.CMember)">
            <summary>
            スケジュール
            </summary>
            <param name="member">メンバー</param>
            <returns>スケジュール</returns>
        </member>
        <member name="P:TimeTableManager.Element.CScheduledDate.Item(System.Int32)">
            <summary>
            スケジュール
            </summary>
            <param name="i">n番目？</param>
            <returns>スケジュール</returns>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetMemberContinues(TimeTableManager.Element.CMember,System.Int32)">
            <summary>
            メンバーは何日連続で働いているか？
            </summary>
            <param name="member">メンバー</param>
            <param name="max">最大値</param>
            <returns>メンバーは何日連続で働いているか</returns>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetTime2ValidMember(System.TimeSpan)">
            <summary>
            稼動中のメンバーの数
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetTime2ValidMember(System.DateTime)">
            <summary>
            稼動中のメンバーの数
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Element.CScheduledDate.GetPeriodTimes">
            <summary>
            区切りになる時間
            </summary>
            <returns>タイムスパンの配列</returns>
        </member>
        <member name="T:TimeTableManager.Element.CTimeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.InitBlock">
            <summary>初期化処理
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.Dates">
            <summary>日付の一覧
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.Members">
            <summary>メンバーの一覧
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.Patterns">
            <summary>勤務シフトの一覧
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.DayOffs">
            <summary>休日の一覧
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.Requires">
            <summary>人員配置の一覧
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.Over">
            <summary>このタイムテーブルは日付をまたぐ
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.id">
            <summary>現在のID
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.CurrentID">
            <summary>現在のID
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.NextID">
            <summary>次のID
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.keepRequire">
            <summary>人員配置を保持するかどうか
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.dates">
            <summary>日付の一覧
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.members">
            <summary>メンバーの一覧
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.daysoff">
            <summary>休日の一覧
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.patterns">
            <summary>勤務シフトの一覧
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.requires">
            <summary>人員配置の一覧
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.defaultRequire">
            <summary>デフォルトの人員配置
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.defaults">
            <summary>デフォルトの人員配置
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.start">
            <summary>開始時間
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.around">
            <summary>営業時間の終了
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.Delete(System.DateTime)">
            <summary>
            日付を削除する
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.Delete(System.Int32)">
            <summary>
            日付を削除する
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.DefaultRequire">
            <summary>
            デフォルトの人員配置
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.tMonday">
            <summary>月曜日</summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.tTuesday">
            <summary>火曜日</summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.tWednesday">
            <summary>水曜日</summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.tThursday">
            <summary>木曜日</summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.tFriday">
            <summary>金曜日</summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.tSaturday">
            <summary>土曜日</summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.tSunday">
            <summary>日曜日</summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.DayOfWeek2Int(System.DayOfWeek)">
            <summary>
            曜日（int→DayoOfWeek）
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.Int2DayOfWeek(System.Int32)">
            <summary>
            曜日（DayoOfWeek→int）
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.GetDefaultRequire(System.DayOfWeek)">
            <summary>人員配置
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.SetDefaultRequire(System.DayOfWeek,TimeTableManager.Element.CRequirePatterns)">
            <summary>人員配置
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.GetDefaultRequire(System.Int32)">
            <summary>曜日ごとの人員配置
            </summary>
            <param name="weekday">曜日</param>
            <returns>人員配置</returns>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.SetDefaultRequire(System.Int32,TimeTableManager.Element.CRequirePatterns)">
            <summary>
            人員配置
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.IsDayOff(System.DateTime)">
            <summary>
            該当する日付が休日かどうか判定する.
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.StartTime">
            <summary>営業開始時刻
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.EndTime">
            <summary>営業終了時刻
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.Around">
            <summary>営業時間
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.Size">
            <summary>
            読み込み済みの日付の数
            </summary>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.KeepRequire">
            <summary>
            人員配置を保持するかどうか
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.Item(System.Int32)">
            <summary>
            人員配置
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.Item(System.DateTime)">
            <summary>
            人員配置
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.GetEnumerator">
            <summary>プロパティキーの一覧
            </summary>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.Item(System.String)">
            <summary>
            プロパティ
            </summary>
        </member>
        <member name="T:TimeTableManager.Element.CTimeTable.PropertyChangeEventHandler">
            <summary>
            休日が変更された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="E:TimeTableManager.Element.CTimeTable.OnPropertyChanged">
            <summary>
            休日が変更された
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.Refresh">
            <summary>
            リフレッシュ
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.ScheduleEditedEvnetIsValid">
            <summary>
            スケジュールが変更されたらイベントを発生する
            </summary>
        </member>
        <member name="T:TimeTableManager.Element.CTimeTable.ScheduleEditedEventHandler">
            <summary>
            スケジュールが変更されたよ
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="E:TimeTableManager.Element.CTimeTable.OnScheduleEdited">
            <summary>
            スケジュールが変更された
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.NotifyScheduleEdited(TimeTableManager.Element.CSchedule)">
            <summary>
            スケジュールが変更された
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:TimeTableManager.Element.CTimeTable.PatternsEditedEventHandler">
            <summary>
            シフトが変更された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="E:TimeTableManager.Element.CTimeTable.OnPatternsEdited">
            <summary>
            シフトが変更された
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.NotifyPatternsEdited(TimeTableManager.Element.EnumTimeTableElementEventTypes,TimeTableManager.Element.CPattern)">
            <summary>
            シフトが変更された
            </summary>
            <param name="type"></param>
            <param name="source"></param>
        </member>
        <member name="T:TimeTableManager.Element.CTimeTable.MembersEditedEventHandler">
            <summary>
            メンバーが変更された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="E:TimeTableManager.Element.CTimeTable.OnMembersEdited">
            <summary>
            メンバーが変更された
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.NotifyMembersEdited(TimeTableManager.Element.EnumTimeTableElementEventTypes,TimeTableManager.Element.CMember)">
            <summary>
            メンバーが変更された
            </summary>
            <param name="type"></param>
            <param name="source"></param>
        </member>
        <member name="T:TimeTableManager.Element.CTimeTable.RequirePatternssEditedEventHandler">
            <summary>
            人員配置が変更された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="E:TimeTableManager.Element.CTimeTable.OnRequirePatternssEdited">
            <summary>
            人員配置が変更された
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.NotifyRequirePatternssEdited(TimeTableManager.Element.EnumTimeTableElementEventTypes,TimeTableManager.Element.CRequirePatterns)">
            <summary>
            人員配置が変更された
            </summary>
            <param name="type"></param>
            <param name="source"></param>
        </member>
        <member name="T:TimeTableManager.Element.CTimeTable.DayOffsEditedEventHandler">
            <summary>
            休日が変更された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="E:TimeTableManager.Element.CTimeTable.OnDayOffsEdited">
            <summary>
            休日が変更された
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.NotifyDayOffsEdited(TimeTableManager.Element.EnumTimeTableElementEventTypes,TimeTableManager.Element.CDayOff)">
            <summary>
            休日が変更された
            </summary>
            <param name="type"></param>
            <param name="source"></param>
        </member>
        <member name="T:TimeTableManager.Element.CTimeTable.ScheduleDateRequirePatternsEditedEventHandler">
            <summary>
            スケジュール日の人員配置が変更された
            </summary>
        </member>
        <member name="E:TimeTableManager.Element.CTimeTable.OnScheduleDateRequirePatternsEdited">
            <summary>
            スケジュール日の人員配置が変更された
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.CTimeTable.NotifyScheduleDateRequirePatternsEdited(TimeTableManager.Element.CScheduledDate,TimeTableManager.Element.CRequirePatterns)">
            <summary>
            スケジュール日の人員配置が変更された
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.CTimeTable.evaluationItems">
            <summary>評価の一覧
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.CTimeTable.EvaluationItems">
            <summary> 評価の一覧
            </summary>
        </member>
        <member name="T:TimeTableManager.Element.EnumTimeTableElementEventTypes">
            <summary>追加・修正・削除・完全削除
            </summary>
        </member>
        <member name="F:TimeTableManager.Element.EnumTimeTableElementEventTypes.ElementAdded">
            <summary>エレメントが追加されました</summary>
        </member>
        <member name="F:TimeTableManager.Element.EnumTimeTableElementEventTypes.ElementEdited">
            <summary>エレメントが修正されました</summary>
        </member>
        <member name="F:TimeTableManager.Element.EnumTimeTableElementEventTypes.ElementRemoved">
            <summary>エレメントが削除されました</summary>
        </member>
        <member name="F:TimeTableManager.Element.EnumTimeTableElementEventTypes.ElementRemovedForce">
            <summary>エレメントが完全に削除されました</summary>
        </member>
        <member name="F:TimeTableManager.Element.EnumTimeTableElementEventTypes.ElementRescued">
            <summary>エレメントが復活されました</summary>
        </member>
        <member name="T:TimeTableManager.Element.EScheduleEditedEventArgs">
            <summary>スケジュールが編集された
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EScheduleEditedEventArgs.Schedule">
            <summary>
            変更されたスケジュール
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.EScheduleEditedEventArgs.#ctor(TimeTableManager.Element.CSchedule)">
            <summary>
            コンストラクタ
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:TimeTableManager.Element.EPatternsEditedEventArgs">
            <summary>勤務シフトが変更された
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EPatternsEditedEventArgs.Type">
            <summary>イベントの種別
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EPatternsEditedEventArgs.Source">
            <summary>イベントの発生元である勤務シフト
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.EPatternsEditedEventArgs.#ctor(TimeTableManager.Element.EnumTimeTableElementEventTypes,TimeTableManager.Element.CPattern)">
            <summary>コンストラクタ
            </summary>
            <param name="EventType">イベント種別</param>
            <param name="EventSource">イベントの発生元</param>
        </member>
        <member name="T:TimeTableManager.Element.EMembersEditedEventArgs">
            <summary>メンバーが変更された
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EMembersEditedEventArgs.Type">
            <summary>イベント種別
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EMembersEditedEventArgs.Source">
            <summary>イベントの発生源であるメンバー
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.EMembersEditedEventArgs.#ctor(TimeTableManager.Element.EnumTimeTableElementEventTypes,TimeTableManager.Element.CMember)">
            <summary>コンストラクタ
            </summary>
            <param name="EventType">イベント種別</param>
            <param name="EventSource">発生源</param>
        </member>
        <member name="T:TimeTableManager.Element.ERequirePatternssEditedEventArgs">
            <summary>人員配置が変更された
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.ERequirePatternssEditedEventArgs.Type">
            <summary>イベント種別
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.ERequirePatternssEditedEventArgs.Source">
            <summary>イベントの発生元となる人員配置
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.ERequirePatternssEditedEventArgs.#ctor(TimeTableManager.Element.EnumTimeTableElementEventTypes,TimeTableManager.Element.CRequirePatterns)">
            <summary>コンストラクタ
            </summary>
            <param name="EventType">イベント種別</param>
            <param name="EventSource">発生源</param>
        </member>
        <member name="T:TimeTableManager.Element.EDayOffsEditedEventArgs">
            <summary>休日が変更された
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EDayOffsEditedEventArgs.Type">
            <summary>イベント種別
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EDayOffsEditedEventArgs.Source">
            <summary>イベントの発生した休日
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.EDayOffsEditedEventArgs.#ctor(TimeTableManager.Element.EnumTimeTableElementEventTypes,TimeTableManager.Element.CDayOff)">
            <summary>コンストラクタ
            </summary>
            <param name="EventType">イベント種別</param>
            <param name="EventSource">発生源</param>
        </member>
        <member name="T:TimeTableManager.Element.EPropertyChangedEventArgs">
            <summary>プロパティが変更された
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EPropertyChangedEventArgs.Key">
            <summary>キー
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EPropertyChangedEventArgs.Value">
            <summary>値
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.EPropertyChangedEventArgs.#ctor(System.String,System.String)">
            <summary>コンストラクタ
            </summary>
            <param name="Key">キー</param>
            <param name="Value">値</param>
        </member>
        <member name="T:TimeTableManager.Element.EScheduleDateRequirePatternsEditedEventArgs">
            <summary>スケジュール日の人員配置が変更された
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EScheduleDateRequirePatternsEditedEventArgs.ScheduledDate">
            <summary>スケジュール日
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EScheduleDateRequirePatternsEditedEventArgs.RequirePatterns">
            <summary>人員配置
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.EScheduleDateRequirePatternsEditedEventArgs.#ctor(TimeTableManager.Element.CScheduledDate,TimeTableManager.Element.CRequirePatterns)">
            <summary>コンストラクタ
            </summary>
            <param name="SDate">スケジュール日</param>
            <param name="Requires">人員配置</param>
        </member>
        <member name="T:TimeTableManager.Element.EEvaluationItemEditedEventArgs">
            <summary>分析結果が変更された
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EEvaluationItemEditedEventArgs.Type">
            <summary>イベント種別
            </summary>
        </member>
        <member name="P:TimeTableManager.Element.EEvaluationItemEditedEventArgs.Source">
            <summary>イベントの発生した分析要素
            </summary>
        </member>
        <member name="M:TimeTableManager.Element.EEvaluationItemEditedEventArgs.#ctor(TimeTableManager.Element.EnumTimeTableElementEventTypes,TimeTableManager.Evaluation.CEvaluationItem)">
            <summary>コンストラクタ
            </summary>
            <param name="EventType">イベント種別</param>
            <param name="EventSource">発生源</param>
        </member>
        <member name="T:TimeTableManager.ElementCollection.CDayOffCollection">
            <summary>
            DayOffCollection の概要の説明です。
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CDayOffCollection.root">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CDayOffCollection.DayOffs">
            <summary>休日の内部配列
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CDayOffCollection.#ctor(TimeTableManager.Element.CTimeTable)">
            <summary>コンストラクタ
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CDayOffCollection.Item(System.Int32)">
            <summary>休日
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CDayOffCollection.GetByName(System.String)">
            <summary>名前から取得
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CDayOffCollection.TimeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CDayOffCollection.Count">
            <summary>サイズ
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CDayOffCollection.Size">
            <summary>サイズ
            </summary>
            <returns>登録されている休日の数</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CDayOffCollection.AddDayOff(TimeTableManager.Element.CDayOff)">
            <summary>休日を追加する
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CDayOffCollection.CreateDayOff">
            <summary>休日の作成
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CDayOffCollection.CreateDayOff(System.Boolean)">
            <summary>新しい休日の作成（初期化つき）
            </summary>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CDayOffCollection.DeleteDayOff(System.Int32)">
            <summary>休日の削除
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CDayOffCollection.DeleteDayOff(TimeTableManager.Element.CDayOff)">
            <summary>休日の削除
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CDayOffCollection.IsDayOff(System.DateTime)">
            <summary>これは休日か？
            </summary>
        </member>
        <member name="T:TimeTableManager.ElementCollection.CPriorityComparer">
            <summary>
            優先順位によるソート発生器
            </summary>
        </member>
        <member name="T:TimeTableManager.ElementCollection.CMemberCollection">
            <summary>メンバーの一覧
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CMemberCollection.InRefresh">
            <summary>リフレッシュの多重処理防止
            </summary>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CMemberCollection.TimeTable">
            <summary>スケジュール全て 
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CMemberCollection.availables">
            <summary>現在有効なメンバー（優先順位順） 
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CMemberCollection.members">
            <summary>すべてのメンバー（キー順） 
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CMemberCollection.parent">
            <summary>スケジュール </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CMemberCollection.priorities">
            <summary>すべてのメンバー（優先順位順） 
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.#ctor(TimeTableManager.Element.CTimeTable)">
            <summary>メンバーコレクション
            </summary>
            <param name="parent">スケジュール</param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.AddMember(TimeTableManager.Element.CMember)">
            <summary>メンバーの追加
            </summary>
            <param name="member">追加するメンバー</param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.Refresh">
            <summary>内部コレクションの再ソート
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.RefreshPriority">
            <summary>優先順位の再設定
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.CreateMember">
            <summary>メンバーの作成
            </summary>
            <returns>新しいメンバー</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.CreateMember(System.Boolean)">
            <summary>メンバーの作成（初期化機能つき）
            </summary>
            <returns>新しいメンバー</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.DelMember(TimeTableManager.Element.CMember)">
            <summary>メンバーの削除
            </summary>
            <param name="member">削除するメンバー</param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.DelMember(TimeTableManager.Element.CMember,System.Boolean)">
            <summary>メンバーの削除
            </summary>
            <param name="member">削除するメンバー</param>
            <param name="complete">完全削除かどうか</param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.GetMember(System.Int32)">
            <summary>メンバーの取得
            </summary>
            <param name="n">n番目のメンバー</param>
            <returns>メンバー</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.GetMember(System.Int32,System.Boolean)">
            <summary>メンバーの取得
            </summary>
            <param name="n">n番目のメンバー</param>
            <param name="force">削除されたものも含む</param>
            <returns>メンバー</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.GetByID(System.Int64)">
            <summary>メンバーの取得（IDによる）
            </summary>
            <param name="n">メンバーのObjectID</param>
            <returns>メンバー</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.GetLastPriority">
            <summary>最後の優先順位
            </summary>
            <returns>最後の優先順位</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.GetLastPriority(System.Boolean)">
            <summary>最後の優先順位
            </summary>
            <returns>最後の優先順位</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.RescueMember(TimeTableManager.Element.CMember)">
            <summary>メンバーの復活
            </summary>
            <param name="member">復活するメンバー</param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.Size">
            <summary>メンバー数（有効なもののみ）
            </summary>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.Size(System.Boolean)">
            <summary>メンバー数
            </summary>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CMemberCollection.Item(System.Int32)">
            <summary>メンバーの取得
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CMemberCollection.Item(System.Int32,System.Boolean)">
            <summary>メンバーの取得
            </summary>
            <param name="i">i番目</param>
            <param name="force">削除済みのアイテムを含む</param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CMemberCollection.GetByName(System.String)">
            <summary>名前から取得する
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:TimeTableManager.ElementCollection.CPatternCollection">
            <summary>パターンの一覧
            </summary>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CPatternCollection.TimeTable">
            <summary>スケジュール全て 
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CPatternCollection.availables">
            <summary>有効なシフト 
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CPatternCollection.parent">
            <summary>スケジュール 
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CPatternCollection.patterns">
            <summary>すべてのシフト 
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.#ctor(TimeTableManager.Element.CTimeTable)">
            <summary>勤務シフトコレクションの作成
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.AddPattern(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトの追加
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.CreatePattern">
            <summary>勤務シフトの作成
            </summary>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.CreatePattern(System.Boolean)">
            <summary>勤務シフトの作成
            </summary>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.DelPattern(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトの削除
            </summary>
            <param name="pattern">削除するシフト</param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.DelPattern(TimeTableManager.Element.CPattern,System.Boolean)">
            <summary>勤務シフトの完全削除
            </summary>
            <param name="pattern">削除するシフト</param>
            <param name="complete">完全に削除するかどうか</param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.GetPattern(System.Int32)">
            <summary>勤務シフトの取得
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.GetPattern(System.Int32,System.Boolean)">
            <summary>勤務シフトの取得
            </summary>
            <param name="n"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.GetByID(System.Int64)">
            <summary>勤務シフトの取得
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.GetByIDorNull(System.Int64)">
            <summary>勤務シフトの取得（なかったらヌル）
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.RescuePattern(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトの復活
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.Size">
            <summary>有効なシフトの数</summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.Size(System.Boolean)">
            <summary>有効/無効なシフトの数</summary>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CPatternCollection.Item(System.Int32)">
            <summary>勤務シフトの取得
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CPatternCollection.Item(System.Int32,System.Boolean)">
            <summary>勤務シフトの取得
            </summary>
            <param name="i"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CPatternCollection.GetByName(System.String)">
            <summary>勤務シフトの取得
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:TimeTableManager.ElementCollection.CRequirePatternsCollection">
            <summary>人員配置の一覧
            </summary>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CRequirePatternsCollection.TimeTable">
            <summary>スケジュール全て 
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CRequirePatternsCollection.allrequires">
            <summary>すべての人員配置 
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CRequirePatternsCollection.availables">
            <summary>有効な人員配置 
            </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CRequirePatternsCollection.parent">
            <summary>スケジュールすべて 
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.#ctor(TimeTableManager.Element.CTimeTable)">
            <summary>有効な人数のコレクション
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.AddRequirePatterns(TimeTableManager.Element.CRequirePatterns)">
            <summary>人員配置の追加
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.CreateRequirePatterns">
            <summary>人員配置の作成
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.CreateRequirePatterns(System.Boolean)">
            <summary>人員配置の作成
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.DelRequirePatterns(TimeTableManager.Element.CRequirePatterns)">
            <summary>人員配置の削除
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.DelRequirePatterns(TimeTableManager.Element.CRequirePatterns,System.Boolean)">
            <summary>人員配置の削除
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.DelRequirePatterns(TimeTableManager.Element.CRequirePatterns,System.DateTime)">
            <summary>日付を指定して人員配置の削除
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.Get_Renamed(System.Int32)">
            <summary>人員配置の取得 有効な人員配置のうちn番目の有効人数
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.Get_Renamed(System.Int32,System.Boolean)">
            <summary>人員配置の取得 有効な人員配置のうちn番目の有効人数
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.GetByID(System.Int64)">
            <summary>IDを指定した人員配置の取得 IDを指定して有効・無効にかかわらず人員配置を取得します
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.GetByIDorNull(System.Int64)">
            <summary>IDを指定した人員配置の取得 IDを指定して有効・無効にかかわらず人員配置を取得します
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.RescueRequirePatterns(TimeTableManager.Element.CRequirePatterns)">
            <summary>人員配置の復活
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.Size">
            <summary>このコレクションのサイズ
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.Size(System.Boolean)">
            <summary>このコレクションのサイズ
            </summary>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CRequirePatternsCollection.Item(System.Int32)">
            <summary>人員配置
            </summary>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CRequirePatternsCollection.Item(System.Int32,System.Boolean)">
            <summary>人員配置
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CRequirePatternsCollection.GetByName(System.String)">
            <summary>人員配置
            </summary>
        </member>
        <member name="T:TimeTableManager.ElementCollection.DateComparer1">
            <summary>ソート用
            </summary>
        </member>
        <member name="T:TimeTableManager.ElementCollection.DateComparer2">
            <summary>ソート用
            </summary>
        </member>
        <member name="T:TimeTableManager.ElementCollection.CScheduledDateCollection">
            <summary>スケジュール日のコレクション
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.InitBlock">
            <summary>初期化処理
            </summary>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CScheduledDateCollection.TimeTable">
            <summary>スケジュールすべて</summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CScheduledDateCollection.timeTable">
            <summary>スケジュールすべて </summary>
        </member>
        <member name="F:TimeTableManager.ElementCollection.CScheduledDateCollection.schedules">
            <summary>スケジュール（オブジェクトID順） </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.#ctor(TimeTableManager.Element.CTimeTable)">
            <summary>XMLノードよりスケジュール化された日付のコレクションを作成する</summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.AddScheduleDate(TimeTableManager.Element.CScheduledDate)">
            <summary>スケジュール日の追加</summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.CreateScheduledDate(System.DateTime)">
            <summary>スケジュール日の作成</summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.DelScheduledDate(TimeTableManager.Element.CScheduledDate)">
            <summary>スケジュール日の削除
            </summary>
            <param name="d">削除するスケジュール日</param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.GetScheduledDate(System.DateTime)">
            <summary>スケジュール日の取得
            </summary>
            <param name="n">日付</param>
            <returns>スケジュール日</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.GetScheduledDate(System.Int32)">
            <summary>スケジュール日の取得
            </summary>
            <param name="n">n番目のスケジュール日</param>
            <returns>n番目のスケジュール日</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.GetByID(System.Int32)">
            <summary>IDによるスケジュール日の取得
            </summary>
            <param name="index">ID</param>
            <returns>スケジュール日</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.Size">
            <summary>サイズ
            </summary>
            <returns>サイズ</returns>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CScheduledDateCollection.Count">
            <summary>含まれる要素の数=Size()
            </summary>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CScheduledDateCollection.Item(System.Int32)">
            <summary>スケジュール日の取得
            </summary>
            <param name="n">n番目のスケジュール日</param>
            <returns>n番目のスケジュール日</returns>
        </member>
        <member name="P:TimeTableManager.ElementCollection.CScheduledDateCollection.Item(System.DateTime)">
            <summary>日付によるスケジュール日の所得
            </summary>
            <param name="d">日付</param>
            <returns>スケジュール日</returns>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.Sort2">
            <summary>内部ソートの呼び出し
            </summary>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.ClearMember(TimeTableManager.Element.CMember,System.DateTime)">
            <summary>メンバーの削除
            </summary>
            <param name="member">削除するメンバー</param>
            <param name="date">削除する日</param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.ClearMember(TimeTableManager.Element.CMember)">
            <summary>メンバーの削除
            </summary>
            <param name="member">削除するメンバー</param>
        </member>
        <member name="M:TimeTableManager.ElementCollection.CScheduledDateCollection.timeTable_OnMembersEdited(System.Object,TimeTableManager.Element.EMembersEditedEventArgs)">
            <summary>メンバーが削除された
            </summary>
            <param name="sender">タイムテーブル</param>
            <param name="e">イベント</param>
        </member>
        <member name="T:TimeTableManager.Evaluation.CPatternComparer1">
            <summary>ソート用
            </summary>
        </member>
        <member name="T:TimeTableManager.Evaluation.CEvaluation1Day">
            <summary>１日分の評価
            </summary>
        </member>
        <member name="T:TimeTableManager.Evaluation.CEvaluation1Day.CTimeSpanSet">
            <summary>タイムスパンのセットまたは空白
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.CTimeSpanSet.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>コンストラクタ
            </summary>
            <param name="Start"></param>
            <param name="End"></param>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluation1Day.CTimeSpanSet.Start">
            <summary>空白の始まり
            </summary>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluation1Day.CTimeSpanSet.End">
            <summary>空白の終わり
            </summary>
        </member>
        <member name="F:TimeTableManager.Evaluation.CEvaluation1Day.sdate">
            <summary>スケジュール日
            </summary>
        </member>
        <member name="F:TimeTableManager.Evaluation.CEvaluation1Day._items">
            <summary>内部リスト
            </summary>
        </member>
        <member name="F:TimeTableManager.Evaluation.CEvaluation1Day._memItems">
            <summary>メンバー、評価
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.#ctor(TimeTableManager.Element.CScheduledDate)">
            <summary>コンストラクタ
            </summary>
            <param name="sDate"></param>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.Check">
            <summary>ここで検証
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.AddItem(TimeTableManager.Evaluation.CEvaluationItem)">
            <summary>検証結果の追加
            </summary>
            <param name="item">検証結果</param>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.AddItem(TimeTableManager.Evaluation.EEvaluationResult,System.String)">
            <summary>検証結果の追加
            </summary>
            <param name="result">追加される検証結果</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.Clear">
            <summary>クリア
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.GenerateMessage(System.String,System.String[])">
            <summary>メッセージに変換する
            </summary>
            <param name="message">メッセージ</param>
            <param name="param">メッセージ</param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.CheckSpaces(System.Collections.Generic.List{TimeTableManager.Element.CPattern})">
            <summary>時間中に空白が生じないか？
            </summary>
            <returns>空白時間のリスト</returns>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.CheckSpaces">
            <summary>時間中に空白が生じないか？
            </summary>
            <returns>空白時間のリスト</returns>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.CheckPatternMuches(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトに対してマッチしているか？
            </summary>
            <param name="pattern">勤務シフト</param>
            <returns>割合</returns>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.CheckPatternMuches">
            <summary>勤務シフトに対してマッチしているか？（１日単位で）
            </summary>
            <returns>割合</returns>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.GetDatePatterns">
            <summary>スケジュール日に設定されたシフトの一覧
            </summary>
            <returns>勤務シフトのリスト</returns>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.GetPatternMemberCount(TimeTableManager.Element.CPattern)">
            <summary>勤務シフトのメンバー数
            </summary>
            <param name="pattern">勤務シフト</param>
            <returns>勤務シフトに該当するメンバー数</returns>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluation1Day.Root">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluation1Day.Items">
            <summary>リスト
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day.CheckMembers">
            <summary>メンバーごとのチェック
            </summary>
        </member>
        <member name="T:TimeTableManager.Evaluation.CEvaluation1Day1Member">
            <summary>１日分、１メンバー分の評価
            </summary>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluation1Day1Member.Root">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluation1Day1Member.Items">
            <summary>リスト
            </summary>
        </member>
        <member name="F:TimeTableManager.Evaluation.CEvaluation1Day1Member._items">
            <summary>内部リスト
            </summary>
        </member>
        <member name="F:TimeTableManager.Evaluation.CEvaluation1Day1Member._parent">
            <summary>親オブジェクト
            </summary>
        </member>
        <member name="F:TimeTableManager.Evaluation.CEvaluation1Day1Member._member">
            <summary>メンバー 
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day1Member.#ctor(TimeTableManager.Evaluation.CEvaluation1Day,TimeTableManager.Element.CMember)">
            <summary>コンストラクタ
            </summary>
            <param name="parent"></param>
            <param name="member"></param>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day1Member.Check">
            <summary>チェックする
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day1Member.Clear">
            <summary>クリア
            </summary>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluation1Day1Member.sdate">
            <summary>スケジュール日
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day1Member.AddItem(TimeTableManager.Evaluation.CEvaluationItem)">
            <summary>検証結果の追加
            </summary>
            <param name="item">検証結果</param>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day1Member.AddItem(TimeTableManager.Evaluation.EEvaluationResult,System.String)">
            <summary>検証結果の追加
            </summary>
            <param name="result">検証結果</param>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day1Member.CheckContinuas">
            <summary>メンバーの連続稼動日数が※1の日数を超えていたら警告
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day1Member.CheckSpace">
            <summary>メンバーの作業時間の重複（エラー）または※2の時間を満たしていなければ警告
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day1Member.CheckPattern">
            <summary>メンバーがこのパターンを含むかどうかチェックする
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluation1Day1Member.GenerateMessage(System.String,System.String[])">
            <summary>メッセージに変換する
            </summary>
            <param name="message"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:TimeTableManager.Evaluation.EEvaluationResult">
            <summary>
            評価結果
            </summary>
        </member>
        <member name="F:TimeTableManager.Evaluation.EEvaluationResult.OK">
            <summary>問題なし</summary>
        </member>
        <member name="F:TimeTableManager.Evaluation.EEvaluationResult.NOTICE">
            <summary>注意</summary>
        </member>
        <member name="F:TimeTableManager.Evaluation.EEvaluationResult.WORNING">
            <summary>警告</summary>
        </member>
        <member name="F:TimeTableManager.Evaluation.EEvaluationResult.ERROR">
            <summary>エラー</summary>
        </member>
        <member name="T:TimeTableManager.Evaluation.CEvaluationItem">
            <summary>
            評価内容
            </summary>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluationItem.NextID">
            <summary>次のIDを発布する
            </summary>
        </member>
        <member name="M:TimeTableManager.Evaluation.CEvaluationItem.#ctor(TimeTableManager.Evaluation.EEvaluationResult,TimeTableManager.Element.CScheduledDate,System.String)">
            <summary>コンストラクタ
            </summary>
            <param name="Result">評価結果</param>
            <param name="Date">日付</param>
            <param name="Message">メッセージ</param>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluationItem.Id">
            <summary>ID
            </summary>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluationItem.Result">
            <summary>評価結果
            </summary>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluationItem.Date">
            <summary>日付
            </summary>
        </member>
        <member name="P:TimeTableManager.Evaluation.CEvaluationItem.Message">
            <summary>メッセージ
            </summary>
        </member>
        <member name="T:TimeTableManager.IO.CLoader">
            <summary>ローダー
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CLoader.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CLoader.Load(System.String)">
            <summary>ロードメイン
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CLoader.LoadPatterns(System.Xml.XmlElement,TimeTableManager.Element.CTimeTable)">
            <summary>勤務シフトのロード
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CLoader.LoadDayOffs(System.Xml.XmlElement,TimeTableManager.Element.CTimeTable)">
            <summary>休日のロード
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CLoader.LoadMembers(System.Xml.XmlElement,TimeTableManager.Element.CTimeTable)">
            <summary>メンバーのロード
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CLoader.LoadRequirePatterns(System.Xml.XmlElement,TimeTableManager.Element.CTimeTable)">
            <summary>人員配置のロード
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CLoader.LoadScheduledDate(System.Xml.XmlElement,TimeTableManager.Element.CTimeTable)">
            <summary>日付のロード
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CLoader.LoadTmElement(System.Xml.XmlElement,TimeTableManager.ITimeTableElement)">
            <summary>エレメントのロード
            </summary>
        </member>
        <member name="T:TimeTableManager.IO.CSaver">
            <summary>
            Domに保存する
            </summary>
        </member>
        <member name="F:TimeTableManager.IO.CSaver.DATEFORMAT">
            <summary>日付の保存形式
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CSaver.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CSaver.Save(System.String,TimeTableManager.Element.CTimeTable)">
            <summary>セーブメイン
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CSaver.SavePatterns(System.Xml.XmlDocument,TimeTableManager.Element.CTimeTable)">
            <summary>勤務シフトのセーブ
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CSaver.SaveDayOffs(System.Xml.XmlDocument,TimeTableManager.Element.CTimeTable)">
            <summary>休日のセーブ
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CSaver.SaveMembers(System.Xml.XmlDocument,TimeTableManager.Element.CTimeTable)">
            <summary>メンバーのセーブ
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CSaver.SaveRequirePatterns(System.Xml.XmlDocument,TimeTableManager.Element.CTimeTable)">
            <summary>人員配置のセーブ
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CSaver.SaveScheduledDate(System.Xml.XmlDocument,System.Xml.XmlElement,TimeTableManager.Element.CTimeTable)">
            <summary>日付のセーブ
            </summary>
        </member>
        <member name="M:TimeTableManager.IO.CSaver.SaveTmElement(System.Xml.XmlDocument,System.Xml.XmlElement,TimeTableManager.ITimeTableElement)">
            <summary>エレメントのセーブ
            </summary>
        </member>
        <member name="T:TimeTableManager.Printing.CPageIndex">
            <summary>ページインデックス
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPageIndex.end">
            <summary>プレビューの終了日</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPageIndex.start">
            <summary>プレビューの開始日</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPageIndex.memberStartIndex">
            <summary>開始メンバー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPageIndex.memberEndIndex">
            <summary>終了メンバー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPageIndex.members">
            <summary>
            有効なメンバーの一覧
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPageIndex.document">
            <summary>
            ドキュメント
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPageIndex.hasMorePage">
            <summary>
            次のページ
            </summary>
        </member>
        <member name="M:TimeTableManager.Printing.CPageIndex.#ctor">
            <summary>
            コンストラクタ 
            </summary>
        </member>
        <member name="M:TimeTableManager.Printing.CPageIndex.CalcPage">
            <summary>
            ページを計算する
            </summary>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Printing.CPageIndex.GetMember(System.Int32)">
            <summary>
            メンバーの取得
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.Printing.CPageIndex.MemberCount">
            <summary>
            メンバー数
            </summary>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.Printing.CPageIndex.DateCount">
            <summary>
            日数
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPageIndex.Start">
            <summary>プレビューの開始日</summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPageIndex.End">
            <summary>プレビューの終了日</summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPageIndex.MemberStartIndex">
            <summary>開始メンバー</summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPageIndex.MemberEndIndex">
            <summary>終了メンバー</summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPageIndex.Document">
            <summary>
            ドキュメント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPageIndex.HasMorePage">
            <summary>
            次のページ
            </summary>
        </member>
        <member name="T:TimeTableManager.Printing.EPrintMargin">
            <summary>印刷マージン
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.EPrintMargin.MARGIN_LEFT">
            <summary>左寄せ</summary>
        </member>
        <member name="F:TimeTableManager.Printing.EPrintMargin.MARGIN_RIGHT">
            <summary>右寄せ</summary>
        </member>
        <member name="F:TimeTableManager.Printing.EPrintMargin.MARGIN_TOP">
            <summary>上寄せ</summary>
        </member>
        <member name="F:TimeTableManager.Printing.EPrintMargin.MARGIN_BOTTOM">
            <summary>下寄せ</summary>
        </member>
        <member name="F:TimeTableManager.Printing.EPrintMargin.MARGIN_CENTER">
            <summary>中央寄せ</summary>
        </member>
        <member name="T:TimeTableManager.Printing.CPrintDocumentBody">
            <summary>
            印刷ドキュメント
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_IMAGEPRINT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_IMAGEPRINT_DEFAULT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_ISDISPLAYREQUIRE">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_ISDISPLAYREQUIRE_DEFAULT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_ISMONTHLY">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_ISMONTHLY_DEFAULT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_ROWCOUNT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_COLUMNCOUNT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_BODYBRUSH">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_DATEBRUSH">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_DATEBRUSHHOL">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_DATEBRUSHSAT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_DATEBRUSHSUN">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_HEADERBRUSH">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_DATECOLUMNWIDTH">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_REQUIRECOLUMNWIDTH">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_TABLEHEADERHIGHT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_BODYFONT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_DATEFONT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_HEADERFONT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_DATEFORMAT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_DATEFORMAT_DEFAULT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.RIT_DATEHEADERFORMAT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.POSTFIX_FONTNAME">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.POSTFIX_FONTSIZE">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.POSTFIX_FONTSTYLE">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.STYLE_BOLD">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.STYLE_ITALIC">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.STYLE_REGULAR">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.STYLE_STRICKEOUT">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.STYLE_UNDERLINE">
            <summary>印刷設定の保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.timeTable">
            <summary>
            タイムテーブル
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.index">
            <summary>
            ページインデックス 
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.start">
            <summary>
            開始
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.end">
            <summary>
            終了 
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.header">
            <summary>
            ヘッダー部 
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.footer">
            <summary>
            フッター部 
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.members">
            <summary>
            有効なメンバーの一覧
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.pages">
            <summary>
            ページインデックス
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.dateColumnWidth">
            <summary>
            日付の列の幅
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.requireColumnWidth">
            <summary>
            人員配置の列の幅
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.tableHeaderHight">
            <summary>
            テーブルのヘッダー部分の高さ
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.headerBrush">
            <summary>
            行ヘッダーの色
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.bodyBrush">
            <summary>
            行の色
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.dateBrush">
            <summary>
            日付の色
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.dateBrushSat">
            <summary>
            日付の色（日曜日）
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.dateBrushSun">
            <summary>
            日付の色（土曜日）
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.dateBrushHol">
            <summary>
            日付の色（休日）
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.HeaderBrush">
            <summary>
            行ヘッダーの色
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.HeaderFont">
            <summary>
            行ヘッダーのフォント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.BodyBrush">
            <summary>
            行の色
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.BodyFont">
            <summary>
            行のフォント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.DateBrush">
            <summary>
            行のフォント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.DateBrushSat">
            <summary>
            日付の色（日曜日）
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.DateBrushSun">
            <summary>
            日付の色（日曜日）
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.DateBrushHol">
            <summary>
            日付の色（休日）
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.DateFont">
            <summary>
            日付のフォント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.DateFormat">
            <summary>
            日付のフォーマット
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.ImagePrint">
            <summary>
            イメージで出力する
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.DateColumnWidth">
            <summary>
            日付の列の幅
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.RequireColumnWidth">
            <summary>
            人員配置の列の幅
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.IsDisplayRequire">
            <summary>
            人員配置を表示するか？
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.TableHeaderHight">
            <summary>
            テーブルのヘッダー部分の高さ
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.Header">
            <summary>
            ヘッダー部
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.Footer">
            <summary>
            フッター部
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.TimeTable">
            <summary>
            タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.Index">
            <summary>
            ページインデックス
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.PageCount">
            <summary>
            ページ数
            </summary>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentBody.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            印刷初期化
            </summary>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentBody.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            印刷
            </summary>
            <param name="e">発生したイベント</param>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.pen">
            <summary>
            罫線を書くペン
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.Pen">
            <summary>
            罫線を書くペン
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.MaxMember">
            <summary>
            １ページあたりの最大のメンバー数
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.MaxDates">
            <summary>
            １ページあたりの最大の日数
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.Monthly">
            <summary>
            月ごとに改ページする
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.CachedStart">
            <summary>
            キャッシュされた開始とスタート
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentBody.CachedEnd">
            <summary>
            キャッシュされた開始とスタート
            </summary>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentBody.PaintBody(System.Drawing.Graphics,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>印刷・ボディ部分
            </summary>
            <param name="g">グラフィックスオブジェクト</param>
            <param name="e">イベント</param>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.Start">
            <summary>
            開始
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentBody.End">
            <summary>
            終了
            </summary>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentBody.GetMember(System.Int32)">
            <summary>
            メンバーの取得
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentBody.GetMemberCount">
            <summary>
            メンバー数
            </summary>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentBody.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Single,TimeTableManager.Printing.EPrintMargin)">
            <summary>
            指定したマージンでテキストを描画する
            </summary>
            <param name="g">グラフィックス</param>
            <param name="text">描画するテキスト</param>
            <param name="font">描画するフォント</param>
            <param name="brush">色など</param>
            <param name="left">左位置</param>
            <param name="right">右位置</param>
            <param name="top">上位置</param>
            <param name="margin">配置</param>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentBody.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,TimeTableManager.Printing.EPrintMargin,TimeTableManager.Printing.EPrintMargin)">
            <summary>
            指定したマージンでテキストを描画する
            </summary>
            <param name="g">グラフィックス</param>
            <param name="text">描画するテキスト</param>
            <param name="font">描画するフォント</param>
            <param name="brush">色など</param>
            <param name="left">左位置</param>
            <param name="right">右位置</param>
            <param name="top">上位置</param>
            <param name="height">高さ</param>
            <param name="vmargin">配置(横)</param>
            <param name="hmargin">配置(縦)</param>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentBody.GetFont(TimeTableManager.Element.CTimeTable,System.String)">
            <summary>タイムテーブルに登録されたフォントの取得
            </summary>
            <param name="timetable">タイムテーブル</param>
            <param name="key">キー</param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentBody.SetFont(TimeTableManager.Element.CTimeTable,System.String,System.Drawing.Font)">
            <summary>
            タイムテーブルにフォントをセットする
            </summary>
            <param name="timetable">タイムテーブル</param>
            <param name="key">キー</param>
            <param name="font">値</param>
        </member>
        <member name="T:TimeTableManager.Printing.CPrintDocumentFooter">
            <summary>印刷フッタ
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentFooter.RIT_FONT">
            <summary>印刷機能のプロパティキー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentFooter.RIT_COLUMN">
            <summary>印刷機能のプロパティキー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentFooter.RIT_FORMAT">
            <summary>印刷機能のプロパティキー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentFooter.RIT_COLUMN_DEFAULT">
            <summary>印刷機能のデフォルト</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentFooter.RID_FORMAT_DEFAULT">
            <summary>印刷機能のデフォルト</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentFooter.height">
            <summary>高さ
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentFooter.brush">
            <summary>色
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentFooter.timeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentFooter.document">
            <summary>ドキュメント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentFooter.ColumnCount">
            <summary>
            列数
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentFooter.Document">
            <summary>
            ドキュメント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentFooter.Format">
            <summary>
            書式
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentFooter.Brush">
            <summary>
            ブラシ
            </summary>        
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentFooter.Font">
            <summary>
            左側フォント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentFooter.Height">
            <summary>
            高さ
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentFooter.Patterns">
            <summary>パターンの一覧
            </summary>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentFooter.GetHeight(System.Drawing.Graphics)">
            <summary>
            高さ
            </summary>
            <param name="g">グラフィックスオブジェクト</param>
            <returns>フッタの高さ</returns>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentFooter.Paint(System.Drawing.Graphics,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>描画
            </summary>
            <param name="g">グラフィックスオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentFooter.TimeTable">
            <summary>
            タイムテーブル
            </summary>
        </member>
        <member name="T:TimeTableManager.Printing.CPrintDocumentHeader">
            <summary>印刷ドキュメントのヘッダ部分
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_CENTERBRUSH">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_LEFTBRUSH">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_RIGHTBRUSH">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_CENTERFONT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_LEFTFONT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_RIGHTFONT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_CENTERTEXT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_LEFTTEXT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_RIGHTTEXT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_LEFTTEXT_DEFAULT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_CENTERTEXT_DEFAULT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_RIGHTTEXT_DEFAULT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_DATEFORMAT_DEFAULT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_DATEFORMAT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_PAGEFORMAT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_PAGEALLFORMAT">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_START_DATE">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_END_DATE">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_PAGE_START_DATE">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_PAGE_END_DATE">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_PAGE">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.RIT_PAGEALL">
            <summary>印刷レイアウトの保存キー</summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.height">
            <summary>
            高さ
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.leftBrush">
            <summary>
            色
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.centerBrush">
            <summary>
            色
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.rightBrush">
            <summary>
            色
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.timeTable">
            <summary>
            タイムテーブル
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.page">
            <summary>
            ページインデックス
            </summary>
        </member>
        <member name="F:TimeTableManager.Printing.CPrintDocumentHeader.document">
            <summary>
            ドキュメント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.Page">
            <summary>ページインデックス
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.Document">
            <summary>ドキュメント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.RightBrush">
            <summary>右側のブラシオブジェクト
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.CenterBrush">
            <summary>中央のブラシオブジェクト
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.LeftBrush">
            <summary>左側のブラシオブジェクト
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.LeftFont">
            <summary>左側フォント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.CenterFont">
            <summary>中央フォント
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.RightFont">
            <summary>左側フォント
            </summary>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentHeader.FormatText2Text(System.String)">
            <summary>文字列の書式化
            含まれる日付等を設定した内容でフォーマットする
            </summary>
            <param name="format">書式化される文字列</param>
            <returns>書式化された文字列</returns>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.LeftText">
            <summary>
            左側のテキスト
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.CenterText">
            <summary>
            中央のテキスト
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.RightText">
            <summary>
            右側のテキスト
            </summary>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.Height">
            <summary>
            高さ
            </summary>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentHeader.GetHeight(System.Drawing.Graphics)">
            <summary>
            高さ
            </summary>
            <param name="g">グラフィックスオブジェクト</param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Printing.CPrintDocumentHeader.Paint(System.Drawing.Graphics,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            描画
            </summary>
            <param name="g">グラフィックオブジェクト</param>
            <param name="e">イベント発生源</param>
        </member>
        <member name="P:TimeTableManager.Printing.CPrintDocumentHeader.TimeTable">
            <summary>
            タイムテーブル
            </summary>
        </member>
        <member name="T:TimeTableManager.FCancelDialog">
            <summary>自動設定のキャンセルダイアログ
            </summary>
        </member>
        <member name="P:TimeTableManager.FCancelDialog.Worker">
            <summary>自動設定処理
            </summary>
        </member>
        <member name="M:TimeTableManager.FCancelDialog.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.FCancelDialog.BtnCancel_Click(System.Object,System.EventArgs)">
            <summary>スレッドを終了して画面を閉じる
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:TimeTableManager.FCancelDialog.components">
            <summary>
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.FCancelDialog.Dispose(System.Boolean)">
            <summary>
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.FCancelDialog.InitializeComponent">
            <summary>
            デザイナ サポートに必要なメソッドです。このメソッドの内容を
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.IFavoriteRandomizer">
            <author>  <a mailto="k_kim_mg@mvh.biglobe.ne.jp">Kenji Kimura</a>
            </author>
        </member>
        <member name="P:TimeTableManager.IFavoriteRandomizer.Name">
            <summary>この発生装置の名前
            </summary>
        </member>
        <member name="P:TimeTableManager.IFavoriteRandomizer.DayAfter">
            <summary>当日からこの日数は自動設定しない
            </summary>
        </member>
        <member name="M:TimeTableManager.IFavoriteRandomizer.AutoAllwithChief(TimeTableManager.Element.CTimeTable,System.DateTime)">
            <summary>自動設定する
            </summary>
            <param name="table">設定するタイムテーブル</param>
            <param name="Adate">開始</param>
        </member>
        <member name="M:TimeTableManager.IFavoriteRandomizer.AutoAllwithChief(TimeTableManager.Element.CTimeTable,System.DateTime,System.DateTime)">
            <summary>自動設定する
            </summary>
            <param name="table">設定するタイムテーブル</param>
            <param name="start">開始</param>
            <param name="end">終了</param>
        </member>
        <member name="M:TimeTableManager.IFavoriteRandomizer.AutoAllwithChief(TimeTableManager.Element.CTimeTable,System.DateTime,System.DateTime,System.DateTime)">
            <summary>自動設定する
            </summary>
            <param name="table">設定するタイムテーブル</param>
            <param name="today">基準日</param>
            <param name="start">開始</param>
            <param name="end">終了</param>
        </member>
        <member name="T:TimeTableManager.Plugin.IPlugin">
            <summary>プラグイン機能のためのインターフェース
            </summary>
        </member>
        <member name="P:TimeTableManager.Plugin.IPlugin.PluginName">
            <summary>プラグインの名称
            </summary>
        </member>
        <member name="P:TimeTableManager.Plugin.IPlugin.PluginDescription">
            <summary>プラグインの説明
            </summary>
        </member>
        <member name="M:TimeTableManager.Plugin.IPlugin.ShowConfigDialog(System.Windows.Forms.IWin32Window)">
            <summary>設定ダイアログ
            </summary>
            <param name="owner">親画面</param>
        </member>
        <member name="M:TimeTableManager.Plugin.IPlugin.DoSomething(TimeTableManager.Element.CTimeTable,System.DateTime,System.DateTime)">
            <summary>画面上で何かする
            （メインウインドウは初期化の時点でBindMainWindowされているといいなあ）
            </summary>
            <param name="TimeTable">タイムテーブル</param>
            <param name="Start">対象開始日</param>
            <param name="End">対象終了日</param>
        </member>
        <member name="M:TimeTableManager.Plugin.IPlugin.BindMainWindow(TimeTableManager.UI.FMainForm)">
            <summary>メインウインドウの関連付け
            </summary>
            <param name="MainForm">メインウインドウ</param>
        </member>
        <member name="P:TimeTableManager.Plugin.IPlugin.IsMenuItem">
            <summary>メニューに追加する？
            </summary>
        </member>
        <member name="T:TimeTableManager.ITimeTableElement">
            <summary>
            基本項目
            </summary>
        </member>
        <member name="P:TimeTableManager.ITimeTableElement.Created">
            <summary>作成日
            </summary>
        </member>
        <member name="P:TimeTableManager.ITimeTableElement.NextID">
            <summary>次のID
            </summary>
        </member>
        <member name="M:TimeTableManager.ITimeTableElement.GetEnumerator">
            <summary>プロパティキーの一覧
            </summary>
            <returns>プロパティキーの一覧</returns>
        </member>
        <member name="P:TimeTableManager.ITimeTableElement.Removed">
            <summary>削除日
            </summary>
        </member>
        <member name="P:TimeTableManager.ITimeTableElement.TimeTable">
            <summary>スケジュール全て
            </summary>
        </member>
        <member name="P:TimeTableManager.ITimeTableElement.ObjectID">
            <summary>オブジェクトID
            </summary>
        </member>
        <member name="M:TimeTableManager.ITimeTableElement.GetProperty(System.String)">
            <summary>プロパティ
            </summary>
            <param name="key">キー</param>
            <returns>戻り値</returns>
        </member>
        <member name="M:TimeTableManager.ITimeTableElement.IsAvailable(System.DateTime)">
            <summary>有効かどうか
            </summary>
            <param name="now">日付</param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ITimeTableElement.IsAvailable(System.DateTime,System.DateTime)">
            <summary>有効かどうか
            </summary>
            <param name="param0">開始</param>
            <param name="param1">終了</param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.ITimeTableElement.SetAvailable(System.Boolean)">
            <summary>有効かどうか
            </summary>
            <param name="available">有効かどうか</param>
        </member>
        <member name="M:TimeTableManager.ITimeTableElement.SetAvailable(System.Boolean,System.DateTime)">
            <summary>有効かどうか
            </summary>
            <param name="available">有効かどうか</param>
            <param name="removed">削除日</param>
        </member>
        <member name="M:TimeTableManager.ITimeTableElement.SetProperty(System.String,System.String)">
            <summary>プロパティの値
            </summary>
            <param name="key">プロパティのキー</param>
            <param name="value_Renamed">プロパティの値</param>
        </member>
        <member name="P:TimeTableManager.ITimeTableElement.Item(System.String)">
            <summary>プロパティ
            </summary>
        </member>
        <member name="P:TimeTableManager.ITimeTableElement.Notes">
            <summary>コメント
            </summary>
        </member>
        <member name="P:TimeTableManager.ITimeTableElement.BuiltIn">
            <summary>これはビルトインオブジェクトですか？
            </summary>
        </member>
        <member name="M:TimeTableManager.Program.Main">
            <summary>エントリポイント
            </summary>
        </member>
        <member name="T:TimeTableManager.Properties.Resources">
            <summary>
              ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
            </summary>
        </member>
        <member name="P:TimeTableManager.Properties.Resources.ResourceManager">
            <summary>
              このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
            </summary>
        </member>
        <member name="P:TimeTableManager.Properties.Resources.Culture">
            <summary>
              厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
              現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
            </summary>
        </member>
        <member name="T:TimeTableManager.Component.UCheckList">
            <summary>チェックリストのパーシャルクラス
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UCheckList.contwrk">
            <summary>
            チェック処理再実行フラグ
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UCheckList.LoopStart">
            <summary>
            ループの開始、終了、表示の開始
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UCheckList.LoopEnd">
            <summary>
            ループの開始、終了、表示の開始
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UCheckList.ViewStart">
            <summary>
            ループの開始、終了、表示の開始
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UCheckList.items">
            <summary>
            評価の一覧？
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UCheckList.TimeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UCheckList.MainForm">
            <summary>親画面
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.Clear">
            <summary>クリア
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.Run">
            <summary>チェック処理のスレッド処理
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.RunCheck(System.ComponentModel.BackgroundWorker)">
            <summary>チェック処理の実体
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.root_OnScheduleEdited(System.Object,TimeTableManager.Element.EScheduleEditedEventArgs)">
            <summary>スケジュールが変更された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.root_OnScheduleDateRequirePatternsEdited(System.Object,TimeTableManager.Element.EScheduleDateRequirePatternsEditedEventArgs)">
            <summary>スケジュールの人員配置が変更された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.mainForm_OnFileOpen(System.Object,TimeTableManager.UI.TimeTableChangedEventArgs)">
            <summary>タイムテーブルが変更された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.mainForm_OnDisplayPeriodChanged(System.Object,TimeTableManager.Component.DisplayPeriodChangedEventArgs)">
            <summary>表示期間が変更された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.mainForm_OnTimeTableAutoEdited(System.Object,TimeTableManager.UI.TimeTableAutoEditedEventArgs)">
            <summary>自動設定された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.ListGrid_CellValueNeeded(System.Object,System.Windows.Forms.DataGridViewCellValueEventArgs)">
            <summary>値を表示する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.backgroundWorker1_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>スレッド開始
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.backgroundWorker1_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>スレッド完了（必要ならスレッド再起動）
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.ListGrid_CellDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>日付を選択できる？
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="F:TimeTableManager.Component.UCheckList.components">
            <summary> 
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.Dispose(System.Boolean)">
            <summary> 
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.Component.UCheckList.InitializeComponent">
            <summary> 
            デザイナ サポートに必要なメソッドです。このメソッドの内容を 
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.Component.PriorityCell">
            <summary>優先順位をあらわすセル
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.PriorityCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)">
            <summary>値の設定時
            </summary>
            <param name="formattedValue"></param>
            <param name="cellStyle"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="valueTypeConverter"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Component.PriorityCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>値の取得時
            </summary>
            <param name="value"></param>
            <param name="rowIndex"></param>
            <param name="cellStyle"></param>
            <param name="valueTypeConverter"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:TimeTableManager.Component.UFavoriteEditor">
            <summary>乱数化されたスケジュール日の表示／編集コンポーネント
            </summary>
            <summary>乱数化されたスケジュール日の表示／編集コンポーネント
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UFavoriteEditor.#ctor">
            <summary>乱数化されたスケジュール日の表示／編集コンポーネント
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UFavoriteEditor.MainForm">
            <summary>メインフォーム
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UFavoriteEditor.mainForm_OnTimeTableAutoEdited(System.Object,TimeTableManager.UI.TimeTableAutoEditedEventArgs)">
            <summary>タイムテーブルが自動編集された
            </summary>
            <param name="sender">イベントの発生元</param>
            <param name="e">イベントオブジェクト</param>
        </member>
        <member name="M:TimeTableManager.Component.UFavoriteEditor.mainForm_OnFileOpen(System.Object,TimeTableManager.UI.TimeTableChangedEventArgs)">
            <summary>タイムテーブルがオープンされた
            </summary>
            <param name="sender">イベントの発生元</param>
            <param name="e">イベントオブジェクト</param>
        </member>
        <member name="M:TimeTableManager.Component.UFavoriteEditor.mainForm_OnCurrentDateChanged(System.Object,TimeTableManager.UI.ECurrentDateChangedArgs)">
            <summary>スケジュール日の選択が変更された
            </summary>
            <param name="sender">イベントの発生元</param>
            <param name="e">イベントオブジェクト</param>
        </member>
        <member name="P:TimeTableManager.Component.UFavoriteEditor.TimeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UFavoriteEditor.timeTable_OnScheduleEdited(System.Object,TimeTableManager.Element.EScheduleEditedEventArgs)">
            <summary>スケジュールが編集された
            </summary>
            <param name="sender">イベントの発生元</param>
            <param name="e">イベントオブジェクト</param>
        </member>
        <member name="P:TimeTableManager.Component.UFavoriteEditor.Date">
            <summary>
            日付の設定
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UFavoriteEditor.RebuildMembers">
            <summary>メンバーの再作成
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UFavoriteEditor.RebuildPatterns">
            <summary>勤務シフトの再作成
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UFavoriteEditor.SetSplitterDistance">
            <summary>
            すぷリッターの位置設定
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UFavoriteEditor.FavoriteEditor2_Layout(System.Object,System.Windows.Forms.LayoutEventArgs)">
            <summary>
            
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="F:TimeTableManager.Component.UFavoriteEditor.components">
            <summary> 
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UFavoriteEditor.Dispose(System.Boolean)">
            <summary> 
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.Component.UFavoriteEditor.InitializeComponent">
            <summary> 
            デザイナ サポートに必要なメソッドです。このメソッドの内容を 
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.Component.MemberCell">
            <summary>
            メンバーをあらわすセル
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.MemberCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)">
            <summary>
            値の設定時
            </summary>
            <param name="formattedValue"></param>
            <param name="cellStyle"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="valueTypeConverter"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Component.MemberCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>
            値の取得時
            </summary>
            <param name="value"></param>
            <param name="rowIndex"></param>
            <param name="cellStyle"></param>
            <param name="valueTypeConverter"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:TimeTableManager.Component.UMultiEditor">
            <summary>エディタ部分のパーシャルクラス
            </summary>
        </member>
        <member name="T:TimeTableManager.Component.UMultiEditor.EnumBarLabelStatus">
            <summary>バーのドラッグドロップ等の状態
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.BarLabelStatus">
            <summary>バーのドラッグドロップ等の状態
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.mainForm">
            <summary>メインフォーム
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.timeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.dates">
            <summary>選択された日付
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.members">
            <summary>メンバーの一覧
            </summary>
        </member>
        <member name="T:TimeTableManager.Component.UMultiEditor.PatternWrapper">
            <summary>勤務シフトのラッパー
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.PatternWrapper.Pattern">
            <summary>勤務シフト
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.PatternWrapper.StartTime">
            <summary>開始時間
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.PatternWrapper.EndTime">
            <summary>終了時間
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.PatternWrapper.Notes">
            <summary>メモ
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.Member2PatternWrapper">
            <summary>勤務シフトのラッパー
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.TableStart">
            <summary>開始時間
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.TableEnd">
            <summary>終了時間
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.TotalHours">
            <summary>時間領域の幅
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.AreaStartTime">
            <summary>30分前
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.threshold">
            <summary>バーの編集の閾値
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.Threshold">
            <summary>バーの編集の閾値
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.MainForm">
            <summary>メインフォーム
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.mainForm_OnTimeTableAutoEdited(System.Object,TimeTableManager.UI.TimeTableAutoEditedEventArgs)">
            <summary>自動設定された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.Editable">
            <summary>編集可能
            過去の編集が可能な場合は編集可能
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.TimeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.timeTable_OnScheduleEdited(System.Object,TimeTableManager.Element.EScheduleEditedEventArgs)">
            <summary>スケジュールが編集されたとき、表示範囲内なら表示を更新する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.timeTable_OnPatternsEdited(System.Object,TimeTableManager.Element.EPatternsEditedEventArgs)">
            <summary>勤務シフトが編集されたらシフトの一覧を再編集する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.timeTable_OnMembersEdited(System.Object,TimeTableManager.Element.EMembersEditedEventArgs)">
            <summary>メンバーが編集されたらメンバーの一覧を再編集する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.Dates">
            <summary>選択された日付
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.StartDate">
            <summary>選択範囲の開始
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.EndDate">
            <summary>選択範囲の終了
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.SetUpValidMembers">
            <summary>メンバーの一覧の作成
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.SetUpValidPatterns">
            <summary>勤務シフトの一覧の作成
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.SetUpMember2Pattern(TimeTableManager.Element.CMember)">
            <summary>メンバーの就業状態の作成
            </summary>
            <param name="member"></param>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.Members">
            <summary>メンバーの一覧
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.mainForm_OnFileOpen(System.Object,TimeTableManager.UI.TimeTableChangedEventArgs)">
            <summary>ファイルがオープンされた
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.mainForm_OnViewSelectionChanged(System.Object,TimeTableManager.UI.ESelectionChangedEventArg)">
            <summary>対象範囲が変更になった
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.#ctor">
            <summary>コンストラクタ
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.BodyTable_CellValueNeeded(System.Object,System.Windows.Forms.DataGridViewCellValueEventArgs)">
            <summary>値の取得
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.BodyTable_CellValuePushed(System.Object,System.Windows.Forms.DataGridViewCellValueEventArgs)">
            <summary>値のセット
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.BodyTable_CellPainting(System.Object,System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>セルの描画
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.CalcTimes">
            <summary>時間の計算
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.PaintBarColumnHeader(System.Object,System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>ヘッダ部分の描画
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.PaintBarColumn(System.Object,System.Windows.Forms.DataGridViewCellPaintingEventArgs)">
            <summary>バー部分の描画
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.GetPattern2Rect(System.Drawing.Rectangle,TimeTableManager.Component.UMultiEditor.PatternWrapper)">
            <summary>座標の計算
            </summary>
            <param name="CellBounds"></param>
            <param name="wrapper"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.BodyTable_CellMouseMove(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>マウスカーソルをどうする？
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.BodyTable_CellMouseDown(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>マウスダウン時ステータスを更新する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="P:TimeTableManager.Component.UMultiEditor.Half">
            <summary>閾値の半分
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.BodyTable_CellMouseUp(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>マウスがあがったとき、バーチャートを更新する
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.GetX2TimeSpan(System.Single,System.Single,System.TimeSpan)">
            <summary>X座標からテーブル（列）上の時間へ変換する
            </summary>
            <param name="width"></param>
            <param name="X"></param>
            <param name="StartOffset"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.GetXSpan2TimeSpan(System.Single,System.Single,System.Single)">
            <summary>X座標（差）からテーブル（列）上の時間へ変換する
            </summary>
            <param name="width"></param>
            <param name="X1"></param>
            <param name="X2"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.CreatePattern(TimeTableManager.Element.CMember,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>勤務シフトを作成する
            </summary>
            <param name="member"></param>
            <param name="Span1"></param>
            <param name="Span2"></param>
            <param name="Rest"></param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.BodyTable_CellMouseDoubleClick(System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs)">
            <summary>ダブルクリック時の処理
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.TsmiAddMember_Click(System.Object,System.EventArgs)">
            <summary>メンバーの追加
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.TsmiEditMember_Click(System.Object,System.EventArgs)">
            <summary>メンバーの修正
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.TsmiRemoveMember_Click(System.Object,System.EventArgs)">
            <summary>メンバーの削除
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.TsmiAddPattern_Click(System.Object,System.EventArgs)">
            <summary>勤務シフトの追加
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.TsmiEditPattern_Click(System.Object,System.EventArgs)">
            <summary>勤務シフトの修正
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.TsmiRemovePattern_Click(System.Object,System.EventArgs)">
            <summary>勤務シフトの削除
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.TsmiComment_Click(System.Object,System.EventArgs)">
            <summary>コメントの追加・修正
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.BodyTable_CellEnter(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>セルの編集可能
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="F:TimeTableManager.Component.UMultiEditor.components">
            <summary> 
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.Dispose(System.Boolean)">
            <summary> 
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.Component.UMultiEditor.InitializeComponent">
            <summary> 
            デザイナ サポートに必要なメソッドです。このメソッドの内容を 
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.Component.UScheduleCalenderView">
            <summary>パーシャルクラス
            </summary>
        </member>
        <member name="F:TimeTableManager.Component.UScheduleCalenderView.selectedDates">
            <summary>選択された日付
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.ColumnFitAuto">
            <summary>列の幅調整モード
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.MainForm">
            <summary>メインフォーム
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.SetColumnsFillAuto(System.Boolean)">
            <summary>列の幅調整モード
            </summary>
            <param name="auto"></param>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.mainForm_OnFileOpen(System.Object,TimeTableManager.UI.TimeTableChangedEventArgs)">
            <summary>ファイルオープンによる
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.mainForm_OnTimeTableAutoEdited(System.Object,TimeTableManager.UI.TimeTableAutoEditedEventArgs)">
            <summary>自動設定が走りました
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.Grid">
            <summary>グリッド？
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.MemberColumnCount">
            <summary>メンバー列の数
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.GetColumnMember(System.Int32)">
            <summary>列のメンバー
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.CurrentRowIndex">
            <summary>カレント行インデックス
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.CurrentRowDate">
            <summary>カレント行日付
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.IsSelected(System.Int32)">
            <summary>選択されている？
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.TimeTable">
            <summary>タイムテーブル
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.timeTable_OnMembersEdited(System.Object,TimeTableManager.Element.EMembersEditedEventArgs)">
            <summary>メンバーが更新された
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.timeTable_OnScheduleDateRequirePatternsEdited(System.Object,TimeTableManager.Element.EScheduleDateRequirePatternsEditedEventArgs)">
            <summary>人員配置が変更になった
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.timeTable_OnScheduleEdited(System.Object,TimeTableManager.Element.EScheduleEditedEventArgs)">
            <summary>スケジュール日が変更になった
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.StartDate">
            <summary>カレンダーの開始日
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.EndDate">
            <summary>カレンダーの終了日
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.NotifyDisplayPeriodChanged">
            <summary> 行数の取得
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.ResetRequires">
            <summary>人員配置の一覧
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.ResetRequires(System.DateTime)">
            <summary>人員配置の一覧
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.ResetPatterns">
            <summary>勤務シフトの一覧
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.ResetPatterns(System.DateTime)">
            <summary>勤務シフトの一覧
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.ResetMembers">
            <summary>メンバー列の再作成
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.#ctor">
            <summary>コンストラクタ
            とりあえず、開始時点では今月の始まりからおわりまで
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.GetDateFromRowIndex(System.Int32)">
            <summary>行インデックスから日付への変換
            </summary>
            <param name="RowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.CalenderView_CellValueNeeded(System.Object,System.Windows.Forms.DataGridViewCellValueEventArgs)">
            <summary>値要求
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.CalenderView_CellValuePushed(System.Object,System.Windows.Forms.DataGridViewCellValueEventArgs)">
            <summary>値設定
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.MaximumSelection">
            <summary>選択された日付の終わり
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.MinimumSelection">
            <summary>選択された日付の始まり
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.SelectedDateCount">
            <summary>選択された日付の日数
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.SelectedDate(System.Int32)">
            <summary>選択された日付
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:TimeTableManager.Component.UScheduleCalenderView.SelectedDates">
            <summary>選択された日付
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.CalenderView_CurrentCellChanged(System.Object,System.EventArgs)">
            <summary>選択された内容の変更
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.CalenderView_RowEnter(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>行が変わったよー
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.CalenderView_SelectionChanged(System.Object,System.EventArgs)">
            <summary>選択された内容の変更
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
        </member>
        <member name="T:TimeTableManager.Component.UScheduleCalenderView.DisplayPeriodChangedEventHandler">
            <summary>表示期間が変更になった
            </summary>
            <param name="sender">イベントの発生したオブジェクト</param>
            <param name="e">発生したイベント</param>
            <returns></returns>
        </member>
        <member name="E:TimeTableManager.Component.UScheduleCalenderView.OnDisplayPeriodChanged">
            <summary>表示期間が変更になった
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.Select(System.DateTime)">
            <summary>この日付を選択する
            </summary>
            <param name="date">選択する日付</param>
        </member>
        <member name="F:TimeTableManager.Component.UScheduleCalenderView.components">
            <summary> 
            必要なデザイナ変数です。
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.Dispose(System.Boolean)">
            <summary> 
            使用中のリソースをすべてクリーンアップします。
            </summary>
            <param name="disposing">マネージ リソースが破棄される場合 true、破棄されない場合は false です。</param>
        </member>
        <member name="M:TimeTableManager.Component.UScheduleCalenderView.InitializeComponent">
            <summary> 
            デザイナ サポートに必要なメソッドです。このメソッドの内容を 
            コード エディタで変更しないでください。
            </summary>
        </member>
        <member name="T:TimeTableManager.Component.RequirePatternsCell">
            <summary>人員配置をあらわすセル
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.RequirePatternsCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)">
            <summary>値の設定時
            </summary>
            <param name="formattedValue"></param>
            <param name="cellStyle"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="valueTypeConverter"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Component.RequirePatternsCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>値の取得時
            </summary>
            <param name="value"></param>
            <param name="rowIndex"></param>
            <param name="cellStyle"></param>
            <param name="valueTypeConverter"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:TimeTableManager.Component.PatternCell">
            <summary>勤務シフトをあらわすセル
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.PatternCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)">
            <summary>値の設定時
            </summary>
            <param name="formattedValue"></param>
            <param name="cellStyle"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="valueTypeConverter"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Component.PatternCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>値の取得時
            </summary>
            <param name="value"></param>
            <param name="rowIndex"></param>
            <param name="cellStyle"></param>
            <param name="valueTypeConverter"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:TimeTableManager.Component.DateCell">
            <summary>数値をあらわすセル
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.DateCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)">
            <summary>値の設定時
            </summary>
            <param name="formattedValue"></param>
            <param name="cellStyle"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="valueTypeConverter"></param>
            <returns></returns>
        </member>
        <member name="M:TimeTableManager.Component.DateCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
            <summary>値の取得時
            </summary>
            <param name="value"></param>
            <param name="rowIndex"></param>
            <param name="cellStyle"></param>
            <param name="valueTypeConverter"></param>
            <param name="formattedValueTypeConverter"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:TimeTableManager.Component.DisplayPeriodChangedEventArgs">
            <summary>表示する期間が変更になった
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.DisplayPeriodChangedEventArgs.Start">
            <summary>表示期間の開始
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.DisplayPeriodChangedEventArgs.End">
            <summary>表示期間の終了
            </summary>
        </member>
        <member name="M:TimeTableManager.Component.DisplayPeriodChangedEventArgs.#ctor(System.DateTime,System.DateTime)">
            <summary>コンストラクタ
            </summary>
            <param name="Start">開始</param>
            <param name="End">終了</param>
        </member>
        <member name="T:TimeTableManager.Component.ShiftComboBoxColumn">
            <summary>勤務シフトコンボボックス
            </summary>
        </member>
        <member name="P:TimeTableManager.Component.ShiftComboBoxColumn.Member">
            <summary>メンバー
            </summary>
        </member>
    </members>
</doc>
